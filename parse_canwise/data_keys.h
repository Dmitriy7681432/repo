//AUTOGENERATED FILE, DO NOT EDIT
// Дата и время обновления: 16.10.2024 09:28

#ifndef __DATA_KEYS_HEADER__
#define __DATA_KEYS_HEADER__

// Агрегат ElectroStation

// Пожар
#define KEY_FIRE ((uint32_t)(1))
// Наработка изделия
#define KEY_STATION_MOTOHOURS ((uint32_t)(2))
// Режим нейтрали
#define KEY_NEUTRAL_MODE ((uint32_t)(3))
// Аварийный останов
#define KEY_AV_OST ((uint32_t)(4))
// Состояние защит
#define KEY_PROTECTIONS_STATE ((uint32_t)(5))
// РБП
#define KEY_RBP ((uint32_t)(46))
// Формат дистанционного управления
#define KEY_DU_FORMAT ((uint32_t)(50))
// Состояние ЭА источника
#define KEY_EL_DEV_STATE ((uint32_t)(52))
// Пожар внешний
#define KEY_FIRE_EXT ((uint32_t)(301))
// Пожар
#define KEY_FIRE_EXT2 ((uint32_t)(302))
// Режим управления станцией СЭC-200М
#define KEY_STATION_CONTROL_MODE ((uint32_t)(303))
// Аварии блока
#define KEY_EVENTS_BLOCK ((uint32_t)(51))
// Сырое значение корректора напряжения ЭА
#define KEY_CORRECTOR_VALUE ((uint32_t)(304))
// Аварийный режим
#define KEY_ALARM_MODE ((uint32_t)(57))
// Режим ожидания
#define KEY_WAITING_MODE ((uint32_t)(305))
// Изменение реакции аварий
#define KEY_ALARM_REACT_CHANGE ((uint32_t)(59))
// Включить сирену
#define KEY_SIREN_ON ((uint32_t)(306))
// Включить охлаждение пульта управления
#define KEY_COOLING_PU_ON ((uint32_t)(307))
// Включeно охлаждение пульта управления
#define KEY_COOLING_PU_ON_CALC ((uint32_t)(308))
// Пожар
#define KEY_EA301 ((uint32_t)(53))
// Аварийный стоп
#define KEY_EA300 ((uint32_t)(54))
// Не норма изоляции от РБП
#define KEY_EA204 ((uint32_t)(55))
// Низкое напряжение АБ ХД
#define KEY_EA321 ((uint32_t)(56))
// Низкое напряжение АБ СТ или АБ ОП
#define KEY_EA323 ((uint32_t)(58))
// Пониженное напряжение АКБ
#define KEY_EP323 ((uint32_t)(309))
// Низкий уровень топлива бака 1
#define KEY_EP002 ((uint32_t)(310))
// Низкий уровень топлива бака 2
#define KEY_EP002_2 ((uint32_t)(311))
// Отключен автомат Подзаряд АБ ХД
#define KEY_EP234 ((uint32_t)(312))
// КЗ(отключен) автомат Подзаряд АБ ХД
#define KEY_EA239 ((uint32_t)(313))
// Неисправность реле К15 Ф22
#define KEY_EA238 ((uint32_t)(314))
// Пониженное напряжение АБ ОП
#define KEY_EP320 ((uint32_t)(315))
// Отключен автомат Q6 экстренного отключения
#define KEY_EA373 ((uint32_t)(316))
// Пожар
#define KEY_LIM_FIRE ((uint32_t)(317))
// Сработало РБП
#define KEY_LIM_RBP ((uint32_t)(318))
// Аварийный останов
#define KEY_LIM_AV_OST ((uint32_t)(319))
// Низкое напряжение АКБ ХД
#define KEY_LIM_U_AB_SHASSIS ((uint32_t)(320))
// Низкое напряжение АКБ
#define KEY_LIM_U_AB_STARTER ((uint32_t)(321))
// Предупреждение: низкое напряжение АКБ
#define KEY_LIM_U_AB_STARTER_MANUAL ((uint32_t)(322))
// ИВЭП норма
#define KEY_LIM_STATUS_IVEP_NORM ((uint32_t)(323))
// ИВЭП НЕ норма
#define KEY_LIM_STATUS_IVEP_NO_NORM ((uint32_t)(324))
// Автомат Q17 (Подзаряд АБ ХД)
#define KEY_LIM_AB_SHASSIS_AUT_OP ((uint32_t)(325))
// КЗ автомата Q17 (Подзаряд АБ ХД)
#define KEY_LIM_AB_SHASSIS_AUT_ ((uint32_t)(326))
// Не cработало РБП
#define KEY_LIM_RBP_OFF ((uint32_t)(327))
// Контроль реле К15 Ф22 при включении
#define KEY_LIM_RELAY_K15_F22_ON ((uint32_t)(328))
// Контроль реле К15 Ф22 при отключении
#define KEY_LIM_RELAY_K15_F22_OFF ((uint32_t)(329))
// Контроль за включением охлаждения пульта управления
#define KEY_LIM_COOLING_PU_ON ((uint32_t)(330))
// Контроль за отключением охлаждения пульта управления
#define KEY_LIM_COOLING_PU_OFF ((uint32_t)(331))
// Включение режима ожидания
#define KEY_LIM_WAIT_ON ((uint32_t)(332))
// Выключение режима ожидания
#define KEY_LIM_WAIT_OFF ((uint32_t)(333))
// Пониженное напряжение АБ ОП
#define KEY_LIM_U_AB_OP ((uint32_t)(334))
// Контроль КЗ(отключен) автомат Q6 экстренного отключения
#define KEY_LIM_Q6_AUT ((uint32_t)(335))

// Агрегат Bus

// Не норма изоляции 50  Гц
#define KEY_B_MKI_AI_EXT ((uint32_t)(1300))
// Не норма изоляции трансформатора 1
#define KEY_B_MKI_T1 ((uint32_t)(1052))
// Не норма изоляции трансформатора 2
#define KEY_B_MKI_T2 ((uint32_t)(1053))
// Не норма изоляции 50 Гц
#define KEY_EP304 ((uint32_t)(1301))
// Неисправность контактора МКИ
#define KEY_EA326 ((uint32_t)(1001))
// Не норма изоляции трансформатора 1
#define KEY_EP305 ((uint32_t)(1302))
// Не норма изоляции трансформатора 2
#define KEY_EP306 ((uint32_t)(1303))
// Сработало МКИ
#define KEY_LIM_MKI ((uint32_t)(1304))
// Контроль включения контактора МКИ
#define KEY_LIM_WAIT_KMKI_ON ((uint32_t)(1305))
// Контроль отключения контактора МКИ
#define KEY_LIM_WAIT_KMKI_OFF ((uint32_t)(1306))
// Сработало МКИ трансформатора 1
#define KEY_LIM_B_MKI_T1 ((uint32_t)(1307))
// Сработало МКИ трансформатора 2
#define KEY_LIM_B_MKI_T2 ((uint32_t)(1308))

// Агрегат Net

// U линейное AB, В
#define KEY_N_U_AB ((uint32_t)(2004))
// U линейное BC, В
#define KEY_N_U_BC ((uint32_t)(2005))
// U линейное AC, В
#define KEY_N_U_AC ((uint32_t)(2006))
// F U фазы A, Гц
#define KEY_N_F_U_A ((uint32_t)(2007))
// F U фазы B, Гц
#define KEY_N_F_U_B ((uint32_t)(2008))
// F U фазы C, Гц
#define KEY_N_F_U_C ((uint32_t)(2009))
// Угол U фазы A, °
#define KEY_N_PHI_U_A ((uint32_t)(2010))
// Угол U фазы B, °
#define KEY_N_PHI_U_B ((uint32_t)(2011))
// Угол U фазы C, °
#define KEY_N_PHI_U_C ((uint32_t)(2012))
// Угол U фазы A, °
#define KEY_N_PHI_U_A_S ((uint32_t)(2076))
// Угол U фазы B, °
#define KEY_N_PHI_U_B_S ((uint32_t)(2077))
// Угол U фазы C, °
#define KEY_N_PHI_U_C_S ((uint32_t)(2078))
// I фазы А, А
#define KEY_N_I_A ((uint32_t)(2013))
// I фазы B, А
#define KEY_N_I_B ((uint32_t)(2014))
// I фазы C, А
#define KEY_N_I_C ((uint32_t)(2015))
// Угол I фазы A, °
#define KEY_N_PHI_I_A ((uint32_t)(2019))
// Угол I фазы B, °
#define KEY_N_PHI_I_B ((uint32_t)(2020))
// Угол I фазы C, °
#define KEY_N_PHI_I_C ((uint32_t)(2021))
// Угол I фазы A, °
#define KEY_N_PHI_I_A_S ((uint32_t)(2079))
// Угол I фазы B, °
#define KEY_N_PHI_I_B_S ((uint32_t)(2080))
// Угол I фазы C, °
#define KEY_N_PHI_I_C_S ((uint32_t)(2081))
// Косинус
#define KEY_N_COS_PHI ((uint32_t)(2022))
// Активная мощность, кВт
#define KEY_N_P ((uint32_t)(2023))
// Реактивная мощность, кВАр
#define KEY_N_Q ((uint32_t)(2024))
// Полная мощность, кВА
#define KEY_N_S ((uint32_t)(2025))
// Состояние
#define KEY_N_STATE ((uint32_t)(2026))
// Норма
#define KEY_N_NORM ((uint32_t)(2027))
// Фазировка
#define KEY_N_PH ((uint32_t)(2028))
// Контактор ввода сети 1
#define KEY_N_CONT ((uint32_t)(2041))
// Контактор ввода сети 1
#define KEY_CONT_NET ((uint32_t)(2050))
// F U фазы A2, Гц
#define KEY_N_F_U_A2 ((uint32_t)(2300))
// Угол U фазы A2, °
#define KEY_N_PHI_U_A2 ((uint32_t)(2301))
// Обрыв одной фазы
#define KEY_N_PH_PHASE ((uint32_t)(2302))
// Аварии сети 1
#define KEY_EVENTS_NET ((uint32_t)(2064))
// U линейное AB2, В
#define KEY_N_U_AB2 ((uint32_t)(2303))
// Состояние источника сети 1
#define KEY_N1_SOURCE_STATE ((uint32_t)(2042))
// Активная мощность сети 1, вычисляемый
#define KEY_N_P_CALC ((uint32_t)(2304))
// U линейное AB сырое
#define KEY_N_U_AB_RAW ((uint32_t)(2305))
// U линейное BC сырое
#define KEY_N_U_BC_RAW ((uint32_t)(2306))
// U линейное AC сырое
#define KEY_N_U_AC_RAW ((uint32_t)(2307))
// F U фазы A сырое
#define KEY_N_F_U_A_RAW ((uint32_t)(2308))
// F U фазы B сырое
#define KEY_N_F_U_B_RAW ((uint32_t)(2309))
// F U фазы C сырое
#define KEY_N_F_U_C_RAW ((uint32_t)(2310))
// I фазы A сырое
#define KEY_N_I_A_RAW ((uint32_t)(2311))
// I фазы B сырое
#define KEY_N_I_B_RAW ((uint32_t)(2312))
// I фазы C сырое
#define KEY_N_I_C_RAW ((uint32_t)(2313))
// F U фазы A2 сырое
#define KEY_N_F_U_A2_RAW ((uint32_t)(2314))
// U линейное AB2 сырое
#define KEY_N_U_AB2_RAW ((uint32_t)(2315))
// Включено реле К1 ввода сети 1
#define KEY_DISCR_RELAY_K1_NET1 ((uint32_t)(2316))
// Включено реле К8 сирены
#define KEY_ON_SIREN ((uint32_t)(2317))
// Параметры сети 1 в норме
#define KEY_NET1_NORM ((uint32_t)(2043))
// Напряжение сети 1 выше нормы
#define KEY_EA200 ((uint32_t)(2065))
// Напряжение сети 1 ниже нормы
#define KEY_EA201 ((uint32_t)(2066))
// Неверная фазировка сети 1
#define KEY_EA202 ((uint32_t)(2067))
// Обрыв фаз сети 1
#define KEY_EA203 ((uint32_t)(2068))
// Неисправность контактора сети 1
#define KEY_EA206 ((uint32_t)(2070))
// Частота сети 1 ниже нормы
#define KEY_EA207 ((uint32_t)(2071))
// Частота сети 1 выше нормы
#define KEY_EA208 ((uint32_t)(2072))
// КЗ сети 1
#define KEY_EA219 ((uint32_t)(2073))
// Нештатное отключение сети 1
#define KEY_EA224 ((uint32_t)(2074))
// Перегруз сети 1 по мощности
#define KEY_EP225 ((uint32_t)(2075))
// Аварийный перегруз сети 1 по мощности
#define KEY_EA217 ((uint32_t)(2082))
// Неисправность реле К1 ввода сети 1
#define KEY_EA237 ((uint32_t)(2083))
// Неверная фазировка/обрыв
#define KEY_LIM_WRONG_PHASING ((uint32_t)(2318))
// Контроль включения контактора сети 1
#define KEY_LIM_WAIT_KN_ON ((uint32_t)(2319))
// Контроль отключения контактора сети 1
#define KEY_LIM_WAIT_KN_OFF ((uint32_t)(2320))
// U фазы AB выше нормы
#define KEY_LIM_N_U_AB_HIGH ((uint32_t)(2321))
// U фазы AB ниже нормы
#define KEY_LIM_N_U_AB_LOW ((uint32_t)(2322))
// U фазы BC выше нормы
#define KEY_LIM_N_U_BC_HIGH ((uint32_t)(2323))
// U фазы BC ниже нормы
#define KEY_LIM_N_U_BC_LOW ((uint32_t)(2324))
// U фазы AC выше нормы
#define KEY_LIM_N_U_AC_HIGH ((uint32_t)(2325))
// U фазы AC ниже нормы
#define KEY_LIM_N_U_AC_LOW ((uint32_t)(2326))
// Частота AB выше нормы
#define KEY_LIM_N_FAB_HIGH ((uint32_t)(2327))
// Частота BC выше нормы
#define KEY_LIM_N_FBC_HIGH ((uint32_t)(2328))
// Частота CA выше нормы
#define KEY_LIM_N_FCA_HIGH ((uint32_t)(2329))
// Частота AB ниже нормы
#define KEY_LIM_N_FAB_LOW ((uint32_t)(2330))
// Частота BC выше нормы
#define KEY_LIM_N_FBC_LOW ((uint32_t)(2331))
// Частота CA выше нормы
#define KEY_LIM_N_FCA_LOW ((uint32_t)(2332))
// Обрыв одной из фаз
#define KEY_LIM_BREAK_WIRE_400 ((uint32_t)(2333))
// Нештатное отключение сети
#define KEY_LIM_N_EMCY ((uint32_t)(2334))
// Контроль обрыва датчика температуры ох.ж.
#define KEY_LIM_BREAK_TEMP_SENSOR ((uint32_t)(2335))
// Контроль обрыва датчика давления масла
#define KEY_LIM_BREAK_PRESSURE_SENSOR ((uint32_t)(2336))
// КЗ сети 1 в фазе A
#define KEY_LIM_N_I_A_SHORT ((uint32_t)(2337))
// КЗ сети 1 в фазе B
#define KEY_LIM_N_I_B_SHORT ((uint32_t)(2338))
// КЗ сети 1 в фазе C
#define KEY_LIM_N_I_C_SHORT ((uint32_t)(2339))
// Перегруз сети 1 по мощности
#define KEY_LIM_P_N ((uint32_t)(2340))
// Перегруз сети 1 по мощности выше max
#define KEY_LIM_P_N_MAX ((uint32_t)(2341))
// Контроль реле К1 ввода сети 1 при включении
#define KEY_LIM_RELAY_K1_NET1_ON ((uint32_t)(2342))
// Контроль реле К1 ввода сети 1 при отключении
#define KEY_LIM_RELAY_K1_NET1_OFF ((uint32_t)(2343))

// Агрегат Net2

// U линейное AB, В
#define KEY_N2_U_AB ((uint32_t)(3004))
// U линейное BC, В
#define KEY_N2_U_BC ((uint32_t)(3005))
// U линейное AC, В
#define KEY_N2_U_AC ((uint32_t)(3006))
// F U фазы A, Гц
#define KEY_N2_F_U_A ((uint32_t)(3007))
// F U фазы B, Гц
#define KEY_N2_F_U_B ((uint32_t)(3008))
// F U фазы C, Гц
#define KEY_N2_F_U_C ((uint32_t)(3009))
// Угол U фазы A, °
#define KEY_N2_PHI_U_A ((uint32_t)(3010))
// Угол U фазы B, °
#define KEY_N2_PHI_U_B ((uint32_t)(3011))
// Угол U фазы C, °
#define KEY_N2_PHI_U_C ((uint32_t)(3012))
// Угол U фазы A, °
#define KEY_N2_PHI_U_A_S ((uint32_t)(3076))
// Угол U фазы B, °
#define KEY_N2_PHI_U_B_S ((uint32_t)(3077))
// Угол U фазы C, °
#define KEY_N2_PHI_U_C_S ((uint32_t)(3078))
// I фазы А, А
#define KEY_N2_I_A ((uint32_t)(3013))
// I фазы B, А
#define KEY_N2_I_B ((uint32_t)(3014))
// I фазы C, А
#define KEY_N2_I_C ((uint32_t)(3015))
// Угол I фазы A, °
#define KEY_N2_PHI_I_A ((uint32_t)(3019))
// Угол I фазы B, °
#define KEY_N2_PHI_I_B ((uint32_t)(3020))
// Угол I фазы C, °
#define KEY_N2_PHI_I_C ((uint32_t)(3021))
// Угол I фазы A, °
#define KEY_N2_PHI_I_A_S ((uint32_t)(3079))
// Угол I фазы B, °
#define KEY_N2_PHI_I_B_S ((uint32_t)(3080))
// Угол I фазы C, °
#define KEY_N2_PHI_I_C_S ((uint32_t)(3081))
// Косинус
#define KEY_N2_COS_PHI ((uint32_t)(3022))
// Активная мощность, кВт
#define KEY_N2_P ((uint32_t)(3023))
// Реактивная мощность, кВАр
#define KEY_N2_Q ((uint32_t)(3024))
// Полная мощность, кВА
#define KEY_N2_S ((uint32_t)(3025))
// Состояние
#define KEY_N2_STATE ((uint32_t)(3026))
// Норма
#define KEY_N2_NORM ((uint32_t)(3027))
// Фазировка
#define KEY_N2_PH ((uint32_t)(3028))
// Обрыв фазы
#define KEY_N2_PH_PHASE ((uint32_t)(3029))
// Контактор ввода сети 2
#define KEY_N2_CONT ((uint32_t)(3041))
// Контактор ввода сети 2
#define KEY_CONT_NET2 ((uint32_t)(3050))
// U линейное AB2, В
#define KEY_N2_U_AB2 ((uint32_t)(3300))
// F U фазы A2, Гц
#define KEY_N2_F_U_A2 ((uint32_t)(3301))
// Угол U фазы A2, °
#define KEY_N2_PHI_U_A2 ((uint32_t)(3302))
// Аварии сети 2
#define KEY_EVENTS_NET2 ((uint32_t)(3064))
// Состояние источника сети 2
#define KEY_N2_SOURCE_STATE ((uint32_t)(3065))
// Активная мощность сети 2, вычисляемый
#define KEY_N2_P_CALC ((uint32_t)(3303))
// U линейное AB сырое
#define KEY_N2_U_AB_RAW ((uint32_t)(3304))
// U линейное BC сырое
#define KEY_N2_U_BC_RAW ((uint32_t)(3305))
// U линейное AC сырое
#define KEY_N2_U_AC_RAW ((uint32_t)(3306))
// F U фазы A сырое
#define KEY_N2_F_U_A_RAW ((uint32_t)(3307))
// F U фазы B сырое
#define KEY_N2_F_U_B_RAW ((uint32_t)(3308))
// F U фазы C сырое
#define KEY_N2_F_U_C_RAW ((uint32_t)(3309))
// I фазы A сырое
#define KEY_N2_I_A_RAW ((uint32_t)(3310))
// I фазы B сырое
#define KEY_N2_I_B_RAW ((uint32_t)(3311))
// I фазы C сырое
#define KEY_N2_I_C_RAW ((uint32_t)(3312))
// F U фазы A2
#define KEY_N2_F_U_A2_RAW ((uint32_t)(3313))
// U линейное AB2 сырое
#define KEY_N2_U_AB2_RAW ((uint32_t)(3314))
// Параметры сети 2 в норме
#define KEY_NET2_NORM ((uint32_t)(3042))
// Напряжение сети 2 выше нормы
#define KEY_EA200_2 ((uint32_t)(3066))
// Напряжение сети 2 ниже нормы
#define KEY_EA201_2 ((uint32_t)(3067))
// Неверная фазировка сети 2
#define KEY_EA202_2 ((uint32_t)(3068))
// Обрыв фаз сети 2
#define KEY_EA203_2 ((uint32_t)(3069))
// Неисправность контактора сети 2
#define KEY_EA206_2 ((uint32_t)(3071))
// Частота сети 2 ниже нормы
#define KEY_EA207_2 ((uint32_t)(3072))
// Частота сети 2 выше нормы
#define KEY_EA208_2 ((uint32_t)(3073))
// КЗ сети 2
#define KEY_EA219_2 ((uint32_t)(3074))
// Нештатное отключение сети 2
#define KEY_EA224_2 ((uint32_t)(3075))
// Перегруз сети 2 по мощности
#define KEY_EP225_2 ((uint32_t)(3082))
// Аварийный перегруз сети 2 по мощности
#define KEY_EA218 ((uint32_t)(3083))
// U фазы AB выше нормы
#define KEY_LIM_N2_U_AB_HIGH ((uint32_t)(3315))
// U фазы AB ниже нормы
#define KEY_LIM_N2_U_AB_LOW ((uint32_t)(3316))
// U фазы BC выше нормы
#define KEY_LIM_N2_U_BC_HIGH ((uint32_t)(3317))
// U фазы BC ниже нормы
#define KEY_LIM_N2_U_BC_LOW ((uint32_t)(3318))
// U фазы AC выше нормы
#define KEY_LIM_N2_U_AC_HIGH ((uint32_t)(3319))
// U фазы AC ниже нормы
#define KEY_LIM_N2_U_AC_LOW ((uint32_t)(3320))
// Неверная фазировка/обрыв
#define KEY_LIM_WRONG_PHASING2 ((uint32_t)(3321))
// Обрыв фазы
#define KEY_LIM_BREAK_WIRE2 ((uint32_t)(3322))
// Контроль включения контактора сети 2
#define KEY_LIM_WAIT_KN2_ON ((uint32_t)(3323))
// Контроль отключения контактора сети 2
#define KEY_LIM_WAIT_KN2_OFF ((uint32_t)(3324))
// Нештатное отключение сети 2
#define KEY_LIM_N2_EMCY ((uint32_t)(3325))
// КЗ сети 2 в фазе A
#define KEY_LIM_N2_I_A_SHORT ((uint32_t)(3326))
// КЗ сети 2 в фазе B
#define KEY_LIM_N2_I_B_SHORT ((uint32_t)(3327))
// КЗ сети 2 в фазе C
#define KEY_LIM_N2_I_C_SHORT ((uint32_t)(3328))
// Перегруз сети 2 по мощности
#define KEY_LIM_P_N2 ((uint32_t)(3329))
// Частота AB выше нормы
#define KEY_LIM_N2_FAB_HIGH ((uint32_t)(3330))
// Частота BC выше нормы
#define KEY_LIM_N2_FBC_HIGH ((uint32_t)(3331))
// Частота CA выше нормы
#define KEY_LIM_N2_FCA_HIGH ((uint32_t)(3332))
// Частота AB ниже нормы
#define KEY_LIM_N2_FAB_LOW ((uint32_t)(3333))
// Частота BC выше нормы
#define KEY_LIM_N2_FBC_LOW ((uint32_t)(3334))
// Частота CA выше нормы
#define KEY_LIM_N2_FCA_LOW ((uint32_t)(3335))
// Перегруз сети 2 по мощности выше max
#define KEY_LIM_P_N2_MAX ((uint32_t)(3336))

// Агрегат EA

// U линейное AB, В
#define KEY_EA_U_AB ((uint32_t)(5004))
// U линейное BC, В
#define KEY_EA_U_BC ((uint32_t)(5005))
// U линейное AC, В
#define KEY_EA_U_AC ((uint32_t)(5006))
// F U фазы A, Гц
#define KEY_EA_F_U_A ((uint32_t)(5007))
// F U фазы B, Гц
#define KEY_EA_F_U_B ((uint32_t)(5008))
// F U фазы C, Гц
#define KEY_EA_F_U_C ((uint32_t)(5009))
// Угол U фазы A невыровненный, °
#define KEY_EA_PHI_U_A ((uint32_t)(5010))
// Угол U фазы B невыровненный, °
#define KEY_EA_PHI_U_B ((uint32_t)(5011))
// Угол U фазы C невыровненный, °
#define KEY_EA_PHI_U_C ((uint32_t)(5012))
// Угол U фазы A, °
#define KEY_EA_PHI_U_A_S ((uint32_t)(5089))
// Угол U фазы B, °
#define KEY_EA_PHI_U_B_S ((uint32_t)(5090))
// Угол U фазы C, °
#define KEY_EA_PHI_U_C_S ((uint32_t)(5091))
// I фазы А, А
#define KEY_EA_I_A ((uint32_t)(5013))
// I фазы B, А
#define KEY_EA_I_B ((uint32_t)(5014))
// I фазы C, А
#define KEY_EA_I_C ((uint32_t)(5015))
// Угол I фазы А, °
#define KEY_EA_PHI_I_A ((uint32_t)(5019))
// Угол I фазы B, °
#define KEY_EA_PHI_I_B ((uint32_t)(5020))
// Угол I фазы C, °
#define KEY_EA_PHI_I_C ((uint32_t)(5021))
// Угол I фазы A, °
#define KEY_EA_PHI_I_A_S ((uint32_t)(5092))
// Угол I фазы B, °
#define KEY_EA_PHI_I_B_S ((uint32_t)(5093))
// Угол I фазы C, °
#define KEY_EA_PHI_I_C_S ((uint32_t)(5094))
// Косинус
#define KEY_EA_COS_PHI ((uint32_t)(5022))
// Активная мощность, кВт
#define KEY_EA_P ((uint32_t)(5023))
// Реактивная мощность, кВАр
#define KEY_EA_Q ((uint32_t)(5024))
// Полная мощность, кВА
#define KEY_EA_S ((uint32_t)(5025))
// Состояние
#define KEY_EA_STATE ((uint32_t)(5026))
// Норма
#define KEY_EA_NORM ((uint32_t)(5027))
// t охлаждающей жидкости, °C
#define KEY_EA_t_COOL ((uint32_t)(5029))
// P масла, МПа
#define KEY_EA_P_OIL ((uint32_t)(5030))
// t масла, °C
#define KEY_EA_t_OIL ((uint32_t)(5031))
// Наработка ЭА
#define KEY_EA_MOTOHOURS ((uint32_t)(5032))
// Обрыв датчика давления масла
#define KEY_EA_P_OIL_CALC ((uint32_t)(5039))
// Активная мощность, вычисляемый
#define KEY_EA_P_CALC ((uint32_t)(5300))
// Контактор ЭА
#define KEY_EA_CONT ((uint32_t)(5041))
// Наличие ОЖ
#define KEY_EA_COOL_NORM ((uint32_t)(5043))
// Воздушный фильтр
#define KEY_EA_FILTER_NORM ((uint32_t)(5044))
// МКИ включен
#define KEY_B_MKI_ON ((uint32_t)(1043))
// Не норма изоляции МКИ 50 Гц
#define KEY_B_MKI_AI ((uint32_t)(1044))
// Наработка ЭА до ТО
#define KEY_EA_MOTOHOURS_TO ((uint32_t)(5301))
// Истекло время наработки ЭА до ТО
#define KEY_EA_MOTOHOURS_TO_END ((uint32_t)(5302))
// Количество произведенного ТО
#define KEY_EA_MOTOHOURS_TO_COUNT ((uint32_t)(5303))
// Наработка ЭА до ТО, в часах
#define KEY_EA_HOURS_TO ((uint32_t)(5304))
// Контактор ЭА
#define KEY_CONT_EA ((uint32_t)(5051))
// Стартер
#define KEY_STARTER_EA ((uint32_t)(5052))
// Автоматическое стоп устройство
#define KEY_ASU_EA ((uint32_t)(5054))
// МКИ
#define KEY_CONT_MKI ((uint32_t)(1051))
// F U фазы A2, Гц
#define KEY_EA_F_U_A2 ((uint32_t)(5305))
// Угол U фазы A2, °
#define KEY_EA_PHI_U_A2 ((uint32_t)(5306))
// Наработка ЭА при перегрузе в пределах 10%
#define KEY_EA_MOTOHOURS10 ((uint32_t)(5307))
// Время, оставшееся до технич. обслуживания ЭА
#define KEY_EA_MOTOHOURS_LEFT ((uint32_t)(5308))
// U линейное AB2, В
#define KEY_EA_U_AB2 ((uint32_t)(5309))
// Пониженное давление масла
#define KEY_EA_P_OIL_NEW ((uint32_t)(5310))
// Авайрийное стоп устройство
#define KEY_ASU_EA_CALC ((uint32_t)(5311))
// Зарядный генератор
#define KEY_CHARGE_GEN ((uint32_t)(5312))
// Топливный клапан
#define KEY_FUEL ((uint32_t)(5313))
// Норма температуры генератора
#define KEY_T_GEN_NORM ((uint32_t)(5057))
// Норма температуры заднего подшипника
#define KEY_T_BEARING_NORM ((uint32_t)(5058))
// Питание стартера от АБ СТ
#define KEY_STARTER_FROM_AB_ST ((uint32_t)(5314))
// Питание стартера от АБ ХД
#define KEY_STARTER_FROM_AB_SHASSIS ((uint32_t)(5315))
// Питание стартера от АБ СТ от К1
#define KEY_STARTER_FROM_AB_ST_K1 ((uint32_t)(5059))
// Питание стартера от АБ ХД от К2
#define KEY_STARTER_FROM_AB_SHASSIS_K2 ((uint32_t)(5097))
// Якорь стартера
#define KEY_ANCHOR_STARTER_EA ((uint32_t)(5316))
// Начальное возбуждение
#define KEY_FIELD_START ((uint32_t)(5317))
// Переключить топливные клапаны
#define KEY_FUEL_TOGGLE ((uint32_t)(5318))
// U корректора
#define KEY_U_CORR_EA ((uint32_t)(5319))
// Питать стартер от АБ СТ
#define KEY_AB_ST_TO_STARTER ((uint32_t)(5320))
// Питать стартер от АБ ХД
#define KEY_AB_SHASSIS_TO_STARTER ((uint32_t)(5321))
// Разнос по трем фазам
#define KEY_EA_F_ABC_PHASE ((uint32_t)(5322))
// Реакции ЭА
#define KEY_EA_REACT ((uint32_t)(5098))
// Включен контактор массы стартера
#define KEY_STARTER_K_MASS ((uint32_t)(5323))
// U линейное AB сырое
#define KEY_EA_U_AB_RAW ((uint32_t)(5324))
// U линейное BC сырое
#define KEY_EA_U_BC_RAW ((uint32_t)(5325))
// U линейное AC сырое
#define KEY_EA_U_AC_RAW ((uint32_t)(5326))
// F U фазы A сырое
#define KEY_EA_F_U_A_RAW ((uint32_t)(5327))
// F U фазы B сырое
#define KEY_EA_F_U_B_RAW ((uint32_t)(5328))
// F U фазы C сырое
#define KEY_EA_F_U_C_RAW ((uint32_t)(5329))
// I фазы A сырое
#define KEY_EA_I_A_RAW ((uint32_t)(5330))
// I фазы B сырое
#define KEY_EA_I_B_RAW ((uint32_t)(5331))
// I фазы C сырое
#define KEY_EA_I_C_RAW ((uint32_t)(5332))
// t охлаждающей жидкости сырое
#define KEY_EA_t_COOL_RAW ((uint32_t)(5333))
// P масла сырое
#define KEY_EA_P_OIL_RAW ((uint32_t)(5334))
// t масла сырое
#define KEY_EA_t_OIL_RAW ((uint32_t)(5335))
// F U фазы U2 сырое
#define KEY_EA_F_U_A2_RAW ((uint32_t)(5336))
// U линейное AB2 сырое
#define KEY_EA_U_AB2_RAW ((uint32_t)(5337))
// Неудавшийся пуск
#define KEY_EA000 ((uint32_t)(5064))
// Давление масла ниже нормы
#define KEY_EA001 ((uint32_t)(5065))
// Перегрев ОЖ двигателя
#define KEY_EA002 ((uint32_t)(5066))
// Низкий уровень ОЖ
#define KEY_EA003 ((uint32_t)(5067))
// Незавершенный останов
#define KEY_EA005 ((uint32_t)(5068))
// Обрыв датчика температуры ОЖ
#define KEY_EA007 ((uint32_t)(5069))
// Обрыв датчика давления масла
#define KEY_EA008 ((uint32_t)(5070))
// Частота ЭА выше нормы
#define KEY_EA009 ((uint32_t)(5071))
// Частота ЭА ниже нормы
#define KEY_EA010 ((uint32_t)(5072))
// Разнос
#define KEY_EA012 ((uint32_t)(5073))
// Воздушный фильтр засорен
#define KEY_EP001 ((uint32_t)(5074))
// Температура ОЖ ниже нормы
#define KEY_EP003 ((uint32_t)(5075))
// Неудавшаяся подстройка частоты
#define KEY_EP005 ((uint32_t)(5076))
// Предупреждение о низком давлении масла
#define KEY_EP007 ((uint32_t)(5077))
// Напряжение генератора выше нормы
#define KEY_EA100 ((uint32_t)(5078))
// Напряжение генератора ниже нормы
#define KEY_EA101 ((uint32_t)(5079))
// Неисправность контактора генератора
#define KEY_EA102 ((uint32_t)(5080))
// Перегруз по току
#define KEY_EA103 ((uint32_t)(5081))
// КЗ генератора или нагрузки
#define KEY_EA106 ((uint32_t)(5082))
// Пропало донесение от КГ во время работы
#define KEY_EA108 ((uint32_t)(5083))
// Перегруз по мощности
#define KEY_EP109 ((uint32_t)(5084))
// Перегрев генератора ЭА
#define KEY_EA110 ((uint32_t)(5085))
// Перегрев заднего подшипника ЭА
#define KEY_EA111 ((uint32_t)(5086))
// Перегрев масла двигателя
#define KEY_EA112 ((uint32_t)(5087))
// Ошибка синхронизации
#define KEY_EA107 ((uint32_t)(5095))
// Аварийный перегруз по мощности
#define KEY_EA109 ((uint32_t)(5096))
// Неисправность зарядного генератора
#define KEY_EP011 ((uint32_t)(5099))
// U фазы AB выше нормы
#define KEY_LIM_EA_U_AB_HIGH ((uint32_t)(5338))
// U фазы BC выше нормы
#define KEY_LIM_EA_U_BC_HIGH ((uint32_t)(5339))
// U фазы AC выше нормы
#define KEY_LIM_EA_U_AC_HIGH ((uint32_t)(5340))
// U фазы AB ниже нормы
#define KEY_LIM_EA_U_AB_LOW ((uint32_t)(5341))
// U фазы BC ниже нормы
#define KEY_LIM_EA_U_BC_LOW ((uint32_t)(5342))
// U фазы AC ниже нормы
#define KEY_LIM_EA_U_AC_LOW ((uint32_t)(5343))
// Низкое давление масла
#define KEY_LIM_EA_P_OIL_MIN ((uint32_t)(5344))
// Пониженное давление масла
#define KEY_LIM_EA_P_OIL_LOW ((uint32_t)(5345))
// Температура ОЖ выше нормы (перегрев ОЖ)
#define KEY_LIM_EA_T_COOL_HIGH ((uint32_t)(5346))
// Температура ОЖ ниже нормы
#define KEY_LIM_T_LIQ_HIGH_400 ((uint32_t)(5347))
// Температура масла выше нормы (перегрев масла)
#define KEY_LIM_EA_T_OIL_HIGH ((uint32_t)(5348))
// Частота выше нормы
#define KEY_LIM_EA_F_HIGH ((uint32_t)(5349))
// Частота ниже нормы
#define KEY_LIM_EA_F_LOW ((uint32_t)(5350))
// Разнос
#define KEY_LIM_EA_F_BREAK ((uint32_t)(5351))
// Контроль включения контактора ЭА
#define KEY_LIM_WAIT_KEA_ON ((uint32_t)(5352))
// Контроль отключения контактора ЭА
#define KEY_LIM_WAIT_KEA_OFF ((uint32_t)(5353))
// Перегруз 50 % по току фазы А
#define KEY_LIM_EA_I_A_150 ((uint32_t)(5354))
// Перегруз 50 % по току фазы B
#define KEY_LIM_EA_I_B_150 ((uint32_t)(5355))
// Перегруз 50 % по току фазы C
#define KEY_LIM_EA_I_C_150 ((uint32_t)(5356))
// КЗ в фазе A
#define KEY_LIM_EA_I_A_SHORT ((uint32_t)(5357))
// КЗ в фазе B
#define KEY_LIM_EA_I_B_SHORT ((uint32_t)(5358))
// КЗ в фазе C
#define KEY_LIM_EA_I_C_SHORT ((uint32_t)(5359))
// Перегруз по мощности ЭА
#define KEY_LIM_P_EA ((uint32_t)(5360))
// Требование ТО
#define KEY_LIM_EA_MOTOHOURS_TO_END ((uint32_t)(5361))
// Перегруз по мощности ЭА выше max
#define KEY_LIM_P_EA_MAX ((uint32_t)(5362))
// Не норма ур. ОЖ
#define KEY_LIM_EA_LEVEL ((uint32_t)(5363))
// Перегрев заднего подшипника ЭА
#define KEY_LIM_RBEA_TEMP ((uint32_t)(5364))
// Перегрев переднего подшипника ЭА
#define KEY_LIM_FBEA_TEMP ((uint32_t)(5365))
// Перегрев генератора ЭА
#define KEY_LIM_EA_TEMP ((uint32_t)(5366))
// Засоренность воздушного фильтра
#define KEY_LIM_FILTER ((uint32_t)(5367))
// Сброс аварии Температура ОЖ ниже нормы
#define KEY_LIM_T_LIQ_HIGH_400_RESET ((uint32_t)(5368))
// Контроль неисправности зарядного генератора
#define KEY_LIM_CHARGE_GEN ((uint32_t)(5369))

// Агрегат EN

// I фазы A, А
#define KEY_EN_I_A ((uint32_t)(9013))
// I фазы B, А
#define KEY_EN_I_B ((uint32_t)(9014))
// I фазы C, А
#define KEY_EN_I_C ((uint32_t)(9015))
// Состояние ЭН ОЖ
#define KEY_EN_STATE ((uint32_t)(9016))
// Состояние ЭН масла
#define KEY_EN_OIL_STATE ((uint32_t)(9017))
// Автомат ЭН
#define KEY_EN_AUT ((uint32_t)(9040))
// Контактор ЭН
#define KEY_EN_CONT ((uint32_t)(9041))
// Контактор ЭН масла
#define KEY_EN_OIL_CONT ((uint32_t)(9042))
// Контактор ЭН ОЖ
#define KEY_CONT_EN ((uint32_t)(9051))
// Автомат ЭН отключен
#define KEY_EN_AUT_OP ((uint32_t)(9052))
// Защита от перегрева ОЖ
#define KEY_EN_PROTECTION ((uint32_t)(9053))
// Контактор ЭН масла
#define KEY_CONT_EN_OIL ((uint32_t)(9300))
// I фазы A сырое
#define KEY_EN_I_A_RAW ((uint32_t)(9301))
// I фазы B сырое
#define KEY_EN_I_B_RAW ((uint32_t)(9302))
// I фазы C сырое
#define KEY_EN_I_C_RAW ((uint32_t)(9303))
// Неисправность контактора ЭН
#define KEY_EA305 ((uint32_t)(9008))
// Неисправность ЭН
#define KEY_EA306 ((uint32_t)(9009))
// КЗ в цепи ЭН
#define KEY_EA322 ((uint32_t)(9010))
// КЗ(отключен) автомат защиты ЭН
#define KEY_EA324 ((uint32_t)(9011))
// Неисправность контактора ЭН масла
#define KEY_EA313 ((uint32_t)(9012))
// Отключен автомат защиты ЭН
#define KEY_EP324 ((uint32_t)(9018))
// Контроль включения контактора ЭН
#define KEY_LIM_WAIT_KEN_ON ((uint32_t)(9304))
// Контроль отключения контактора ЭН
#define KEY_LIM_WAIT_KEN_OFF ((uint32_t)(9305))
// КЗ фазы A ЭН
#define KEY_LIM_EN_I_A_SHORT ((uint32_t)(9306))
// КЗ фазы B ЭН
#define KEY_LIM_EN_I_B_SHORT ((uint32_t)(9307))
// КЗ фазы C ЭН
#define KEY_LIM_EN_I_C_SHORT ((uint32_t)(9308))
// Обрыв фазы A ЭН
#define KEY_LIM_EN_I_A_BREAK ((uint32_t)(9309))
// Обрыв фазы B ЭН
#define KEY_LIM_EN_I_B_BREAK ((uint32_t)(9310))
// Обрыв фазы C ЭН
#define KEY_LIM_EN_I_C_BREAK ((uint32_t)(9311))
// Контроль КЗ(отключен) автомат защиты ЭН
#define KEY_LIM_EN_QF ((uint32_t)(9312))
// Контроль включения контактора ЭН масла
#define KEY_LIM_WAIT_KEN_OIL_ON ((uint32_t)(9313))
// Контроль отключения контактора ЭН масла
#define KEY_LIM_WAIT_KEN_OIL_OFF ((uint32_t)(9314))
// Контроль автомата защиты ЭН
#define KEY_LIM_EN_AUT_OP ((uint32_t)(9315))

// Агрегат BU

// Метка времени, мс
#define KEY_TIME_STAMP ((uint32_t)(12001))
// Метка времени
#define KEY_TIME_STAMP2 ((uint32_t)(12002))
// Метка времени
#define KEY_TIME_STAMP3 ((uint32_t)(12003))
// Команды оператора
#define KEY_OPERATOR_COMMAND ((uint32_t)(12011))
// Команды оператора
#define KEY_ETHERNET_COMMAND ((uint32_t)(120111))
// Команды оператора
#define KEY_PARALLEL_COMMAND ((uint32_t)(120112))
// Внешняя команда
#define KEY_EXTERNAL_COMMAND ((uint32_t)(12013))
// Адрес уставок в ОЗУ
#define KEY_ADDR_PRESET_RAM ((uint32_t)(12021))
// Адрес уставок в ОЗУ 2
#define KEY_ADDR_PRESET_RAM2 ((uint32_t)(12022))
// Адрес уставок в ОЗУ 3
#define KEY_ADDR_PRESET_RAM3 ((uint32_t)(12023))
// Адрес уставок в ПЗУ
#define KEY_ADDR_PRESET_ROM ((uint32_t)(12031))
// Адрес уставок в ПЗУ 2
#define KEY_ADDR_PRESET_ROM2 ((uint32_t)(12032))
// Адрес уставок в ПЗУ 3
#define KEY_ADDR_PRESET_ROM3 ((uint32_t)(12033))
// Адрес калибровок в ОЗУ
#define KEY_ADDR_CALIBR_RAM ((uint32_t)(12041))
// Адрес калибровок в ОЗУ 2
#define KEY_ADDR_CALIBR_RAM2 ((uint32_t)(12042))
// Адрес калибровок в ОЗУ 3
#define KEY_ADDR_CALIBR_RAM3 ((uint32_t)(12043))
// Адрес калибровок в ПЗУ
#define KEY_ADDR_CALIBR_ROM ((uint32_t)(12051))
// Адрес калибровок в ПЗУ 2
#define KEY_ADDR_CALIBR_ROM2 ((uint32_t)(12052))
// Адрес калибровок в ПЗУ 3
#define KEY_ADDR_CALIBR_ROM3 ((uint32_t)(12053))
// Адрес наработки
#define KEY_ADDR_MOTOHOURS ((uint32_t)(12061))
// Адрес наработки 2
#define KEY_ADDR_MOTOHOURS2 ((uint32_t)(12063))
// Адрес наработки 3
#define KEY_ADDR_MOTOHOURS3 ((uint32_t)(12064))
// Версия ПО модуля управления
#define KEY_SW_VERSION ((uint32_t)(12080))
// Версия ПО модуля управления 2
#define KEY_SW_VERSION2 ((uint32_t)(12081))
// Версия ПО модуля управления 3
#define KEY_SW_VERSION3 ((uint32_t)(12082))
// Адрес фильтров в ОЗУ
#define KEY_ADDR_FILTR_RAM ((uint32_t)(12091))
// Адрес фильтров в ОЗУ 2
#define KEY_ADDR_FILTR_RAM2 ((uint32_t)(12092))
// Адрес фильтров в ОЗУ 3
#define KEY_ADDR_FILTR_RAM3 ((uint32_t)(12093))
// Адрес фильтров в ПЗУ
#define KEY_ADDR_FILTR_ROM ((uint32_t)(12101))
// Адрес фильтров в ПЗУ 2
#define KEY_ADDR_FILTR_ROM2 ((uint32_t)(12102))
// Адрес фильтров в ПЗУ 3
#define KEY_ADDR_FILTR_ROM3 ((uint32_t)(12103))
// T воздуха в отсеке, °C
#define KEY_AIR_TEMP ((uint32_t)(12111))
// Начальный источник 400 В 50 Гц
#define KEY_INITIAL_SOURCE ((uint32_t)(12300))
// Аварии ЭА
#define KEY_EVENTS_EA ((uint32_t)(121031))
// Аварии блока
#define KEY_EVENTS_BLOCK_50 ((uint32_t)(121032))
// Предупреждения ЭА
#define KEY_WARNINGS_EA ((uint32_t)(12301))
// Команды БУ 400
#define KEY_COMMANDS_BU_400 ((uint32_t)(12302))
// Команды БУ СЭC
#define KEY_COMMANDS1_BU_SES ((uint32_t)(12303))
// Команды БУ СЭC, часть 2
#define KEY_COMMANDS2_BU_SES ((uint32_t)(12304))
// Команды БУ 50
#define KEY_COMMANDS_BU_50 ((uint32_t)(12305))
// Донесения БУ 400
#define KEY_DISCRETES_400 ((uint32_t)(12104))
// Донесения2 БУ 400
#define KEY_DISCRETES2_400 ((uint32_t)(12105))
// Донесения 1 БУ СЭС
#define KEY_DISCRETES1_SES ((uint32_t)(12106))
// Донесения 2 БУ СЭС
#define KEY_DISCRETES2_SES ((uint32_t)(12107))
// Донесения 1 БУ 50
#define KEY_DISCRETES1_50 ((uint32_t)(12108))
// Донесения 2 БУ 50
#define KEY_DISCRETES2_50 ((uint32_t)(12109))
// Режим работы
#define KEY_MODE ((uint32_t)(12306))
// Отказ люка забора
#define KEY_HATCH_IN_BREAK ((uint32_t)(12307))
// Наработка изделия, ч
#define KEY_STATION_HOURS ((uint32_t)(12308))
// Наработка ЭА, ч
#define KEY_EA_HOURS ((uint32_t)(12309))
// Наработка ЭА с перегрузом, ч
#define KEY_EA_HOURS10 ((uint32_t)(12310))
// Состояние КА А0
#define KEY_FSM_A0_STATE ((uint32_t)(12014))
// Опрос МАВ А4
#define KEY_POLLING_MAV_A4 ((uint32_t)(12311))
// Опрос МАВ А4
#define KEY_POLLING_MAV_A4_2 ((uint32_t)(12312))
// Опрос МАВ А5
#define KEY_POLLING_MAV_A5 ((uint32_t)(12313))
// Опрос МАВ А5
#define KEY_POLLING_MAV_A5_2 ((uint32_t)(12314))
// Опрос МАВ А6
#define KEY_POLLING_MAV_A6 ((uint32_t)(12315))
// Опрос МАВ А6
#define KEY_POLLING_MAV_A6_2 ((uint32_t)(12316))
// Процесс синхронизации источников
#define KEY_SOURCES_SINHR ((uint32_t)(12110))
// Состояния ПЧ
#define KEY_FC_STATES2 ((uint32_t)(12317))
// Адрес структуры режима в ОЗУ
#define KEY_ADDR_STMODE_RAM1 ((uint32_t)(12015))
// Адрес структуры режима в ОЗУ
#define KEY_ADDR_STMODE_RAM2 ((uint32_t)(12016))
// Адрес структуры режима в ОЗУ
#define KEY_ADDR_STMODE_RAM3 ((uint32_t)(12017))
// Адрес структуры режима в ПЗУ
#define KEY_ADDR_STMODE_FLASH1 ((uint32_t)(12018))
// Адрес структуры режима в ПЗУ
#define KEY_ADDR_STMODE_FLASH2 ((uint32_t)(12019))
// Адрес структуры режима в ПЗУ
#define KEY_ADDR_STMODE_FLASH3 ((uint32_t)(12020))
// Шапка уставок. CRC32
#define KEY_PRESET_HEADER_CRC ((uint32_t)(12118))
// Шапка уставок. Дата
#define KEY_PRESET_HEADER_DATE ((uint32_t)(12318))
// Шапка уставок. Время
#define KEY_PRESET_HEADER_TIME ((uint32_t)(12319))
// Шапка уставок. Git commit
#define KEY_PRESET_HEADER_GIT_COMMIT ((uint32_t)(12320))
// Шапка уставок. От дисплея?
#define KEY_PRESET_HEADER_FROM_DISPLAY ((uint32_t)(12321))
// Шапка уставок. Длина данных
#define KEY_PRESET_HEADER_DATA_LENGTH ((uint32_t)(12322))
// Шапка уставок. CRC32
#define KEY_PRESET_HEADER_CRC2 ((uint32_t)(12323))
// Шапка уставок. Дата
#define KEY_PRESET_HEADER_DATE2 ((uint32_t)(12324))
// Шапка уставок. Время
#define KEY_PRESET_HEADER_TIME2 ((uint32_t)(12325))
// Шапка уставок. Git commit
#define KEY_PRESET_HEADER_GIT_COMMIT2 ((uint32_t)(12326))
// Шапка уставок. От дисплея?
#define KEY_PRESET_HEADER_FROM_DISPLAY2 ((uint32_t)(12327))
// Шапка уставок. Длина данных
#define KEY_PRESET_HEADER_DATA_LENGTH2 ((uint32_t)(12328))
// Шапка уставок. CRC32
#define KEY_PRESET_HEADER_CRC3 ((uint32_t)(12329))
// Шапка уставок. Дата
#define KEY_PRESET_HEADER_DATE3 ((uint32_t)(12330))
// Шапка уставок. Время
#define KEY_PRESET_HEADER_TIME3 ((uint32_t)(12331))
// Шапка уставок. Git commit
#define KEY_PRESET_HEADER_GIT_COMMIT3 ((uint32_t)(12332))
// Шапка уставок. От дисплея?
#define KEY_PRESET_HEADER_FROM_DISPLAY3 ((uint32_t)(12333))
// Шапка уставок. Длина данных
#define KEY_PRESET_HEADER_DATA_LENGTH3 ((uint32_t)(12334))
// Шапка калибровок. CRC32
#define KEY_CALIBRATION_HEADER_CRC ((uint32_t)(12335))
// Шапка калибровок. Дата
#define KEY_CALIBRATION_HEADER_DATE ((uint32_t)(12336))
// Шапка калибровок. Время
#define KEY_CALIBRATION_HEADER_TIME ((uint32_t)(12337))
// Шапка калибровок. Git commit
#define KEY_CALIBRATION_HEADER_GIT_COMMIT ((uint32_t)(12338))
// Шапка калибровок. От дисплея?
#define KEY_CALIBRATION_HEADER_FROM_DISPLAY ((uint32_t)(12339))
// Шапка калибровок. Длина данных
#define KEY_CALIBRATION_HEADER_DATA_LENGTH ((uint32_t)(12340))
// Шапка калибровок. CRC32
#define KEY_CALIBRATION_HEADER_CRC2 ((uint32_t)(12341))
// Шапка калибровок. Дата
#define KEY_CALIBRATION_HEADER_DATE2 ((uint32_t)(12342))
// Шапка калибровок. Время
#define KEY_CALIBRATION_HEADER_TIME2 ((uint32_t)(12343))
// Шапка калибровок. Git commit
#define KEY_CALIBRATION_HEADER_GIT_COMMIT2 ((uint32_t)(12344))
// Шапка калибровок. От дисплея?
#define KEY_CALIBRATION_HEADER_FROM_DISPLAY2 ((uint32_t)(12345))
// Шапка калибровок. Длина данных
#define KEY_CALIBRATION_HEADER_DATA_LENGTH2 ((uint32_t)(12346))
// Шапка калибровок. CRC32
#define KEY_CALIBRATION_HEADER_CRC3 ((uint32_t)(12347))
// Шапка калибровок. Дата
#define KEY_CALIBRATION_HEADER_DATE3 ((uint32_t)(12348))
// Шапка калибровок. Время
#define KEY_CALIBRATION_HEADER_TIME3 ((uint32_t)(12349))
// Шапка калибровок. Git commit
#define KEY_CALIBRATION_HEADER_GIT_COMMIT3 ((uint32_t)(12350))
// Шапка калибровок. От дисплея?
#define KEY_CALIBRATION_HEADER_FROM_DISPLAY3 ((uint32_t)(12351))
// Шапка калибровок. Длина данных
#define KEY_CALIBRATION_HEADER_DATA_LENGTH3 ((uint32_t)(12352))
// Шапка фильтров. CRC32
#define KEY_FILTER_HEADER_CRC ((uint32_t)(12353))
// Шапка фильтров. Дата
#define KEY_FILTER_HEADER_DATE ((uint32_t)(12354))
// Шапка фильтров. Время
#define KEY_FILTER_HEADER_TIME ((uint32_t)(12355))
// Шапка фильтров. Git commit
#define KEY_FILTER_HEADER_GIT_COMMIT ((uint32_t)(12356))
// Шапка фильтров. От дисплея?
#define KEY_FILTER_HEADER_FROM_DISPLAY ((uint32_t)(12357))
// Шапка фильтров. Длина данных
#define KEY_FILTER_HEADER_DATA_LENGTH ((uint32_t)(12358))
// Шапка фильтров. CRC32
#define KEY_FILTER_HEADER_CRC2 ((uint32_t)(12359))
// Шапка фильтров. Дата
#define KEY_FILTER_HEADER_DATE2 ((uint32_t)(12360))
// Шапка фильтров. Время
#define KEY_FILTER_HEADER_TIME2 ((uint32_t)(12361))
// Шапка фильтров. Git commit
#define KEY_FILTER_HEADER_GIT_COMMIT2 ((uint32_t)(12362))
// Шапка фильтров. От дисплея?
#define KEY_FILTER_HEADER_FROM_DISPLAY2 ((uint32_t)(12363))
// Шапка фильтров. Длина данных
#define KEY_FILTER_HEADER_DATA_LENGTH2 ((uint32_t)(12364))
// Шапка фильтров. CRC32
#define KEY_FILTER_HEADER_CRC3 ((uint32_t)(12365))
// Шапка фильтров. Дата
#define KEY_FILTER_HEADER_DATE3 ((uint32_t)(12366))
// Шапка фильтров. Время
#define KEY_FILTER_HEADER_TIME3 ((uint32_t)(12367))
// Шапка фильтров. Git commit
#define KEY_FILTER_HEADER_GIT_COMMIT3 ((uint32_t)(12368))
// Шапка фильтров. От дисплея?
#define KEY_FILTER_HEADER_FROM_DISPLAY3 ((uint32_t)(12369))
// Шапка фильтров. Длина данных
#define KEY_FILTER_HEADER_DATA_LENGTH3 ((uint32_t)(12370))
// Режимы включения источников
#define KEY_SOURCE_MODES ((uint32_t)(12172))
// Сообщение о необходимости включить ПХЗ,ПАЗ
#define KEY_PAZ_PHZ_ON ((uint32_t)(12371))
// Сообщение о необходимости включить тревогу
#define KEY_ALARM_ON ((uint32_t)(12372))
// СЭС откл
#define KEY_SES_OFF ((uint32_t)(12175))
// СЭС откл исполнено
#define KEY_SES_OFF_PERFORMING ((uint32_t)(12373))
// Номер режима вкл
#define KEY_NUM_MODE_ON ((uint32_t)(12176))
// Номер режима вкл исполнено
#define KEY_NUM_MODE_ON_PERFORMING ((uint32_t)(12374))
// Сеть готова
#define KEY_NET_READY ((uint32_t)(12375))
// Сеть неисправна
#define KEY_NET_ALARM ((uint32_t)(12376))
// ДЭС готова
#define KEY_SES_READY ((uint32_t)(12377))
// ДЭС неисправна
#define KEY_SES_ALARM ((uint32_t)(12378))
// Блок управления 1
#define KEY_UNIT_CONTROL_1 ((uint32_t)(12379))
// Блок управления 2
#define KEY_UNIT_CONTROL_2 ((uint32_t)(12184))
// Блок управления 3
#define KEY_UNIT_CONTROL_3 ((uint32_t)(12185))
// Пожар СЭС
#define KEY_FIRE_SES ((uint32_t)(12186))
// ДУ вкл
#define KEY_PDU_ON ((uint32_t)(12187))
// МУ вкл
#define KEY_LOCAL_ON ((uint32_t)(12188))
// Режимы вкл и исполнено
#define KEY_NUM_MODES_PERF ((uint32_t)(12189))
// Контроль аварий по аварийному уровню топлива
#define KEY_CONTROL_ALARM_LEVEL ((uint32_t)(12190))
// Аварии блока бу 400_1
#define KEY_EVENTS_BLOCK_400 ((uint32_t)(12191))
// T воздуха в отсеке сырое
#define KEY_AIR_TEMP_RAW ((uint32_t)(12380))
// Аварии блока бу 400_2
#define KEY_EVENTS_BLOCK_400_2 ((uint32_t)(12192))
// Донесения3 БУ 400
#define KEY_DISCRETES3_400 ((uint32_t)(12112))
// Обрыв датчика температуры воздуха
#define KEY_EA352 ((uint32_t)(12381))
// КЗ(отключен) автомат Q16 (ПC)
#define KEY_EP425 ((uint32_t)(12382))
// Липовая авария
#define KEY_EA999 ((uint32_t)(12383))
// Не норма ПС
#define KEY_EP426 ((uint32_t)(12384))
// Несоответствие CRC уставок БУ 50
#define KEY_EP427 ((uint32_t)(12385))
// Несоответствие CRC калибровок БУ 50
#define KEY_EP428 ((uint32_t)(12386))
// Несоответствие CRC фильтров БУ 50
#define KEY_EP429 ((uint32_t)(12387))
// Несоответствие CRC уставок БУ СЭС
#define KEY_EP430 ((uint32_t)(12388))
// Несоответствие CRC калибровок БУ СЭС
#define KEY_EP431 ((uint32_t)(12389))
// Несоответствие CRC фильтров БУ СЭС
#define KEY_EP432 ((uint32_t)(12390))
// Несоответствие CRC уставок БУ 400
#define KEY_EP433 ((uint32_t)(12391))
// Несоответствие CRC калибровок БУ 400
#define KEY_EP434 ((uint32_t)(12392))
// Несоответствие CRC фильтров БУ 400
#define KEY_EP435 ((uint32_t)(12393))
// Контроль отказа люка забора
#define KEY_LIM_HATCH_IN_BREAK ((uint32_t)(12394))
// Обрыв датчика температуры воздуха
#define KEY_LIM_BREAK_AIR_TEMP ((uint32_t)(12395))
// Контроль включения контактора фидера 1
#define KEY_LIM_WAIT_KFID1_ON ((uint32_t)(12396))
// Контроль включения контактора фидера 1
#define KEY_LIM_WAIT_KFID1_OFF ((uint32_t)(12397))
// Контроль включения контактора фидера 2
#define KEY_LIM_WAIT_KFID2_ON ((uint32_t)(12398))
// Контроль включения контактора фидера 2
#define KEY_LIM_WAIT_KFID2_OFF ((uint32_t)(12399))
// Контроль включения контактора фидера 3
#define KEY_LIM_WAIT_KFID3_ON ((uint32_t)(12400))
// Контроль включения контактора фидера 3
#define KEY_LIM_WAIT_KFID3_OFF ((uint32_t)(12401))
// Контроль включения контактора фидера 3-1
#define KEY_LIM_WAIT_KFID3_1_ON ((uint32_t)(12402))
// Контроль включения контактора фидера 3-1
#define KEY_LIM_WAIT_KFID3_1_OFF ((uint32_t)(12403))
// Контроль включения контактора фидера 3-2
#define KEY_LIM_WAIT_KFID3_2_ON ((uint32_t)(12404))
// Контроль отключения контактора фидера 3-2
#define KEY_LIM_WAIT_KFID3_2_OFF ((uint32_t)(12405))
// Контроль включения контактора фидера 4
#define KEY_LIM_WAIT_KFID4_ON ((uint32_t)(12406))
// Контроль отключения контактора фидера 3-2
#define KEY_LIM_WAIT_KFID4_OFF ((uint32_t)(12407))
// Контроль аварий по аварийному уровню топливу
#define KEY_LIM_CONTROL_ALARM_LEVEL ((uint32_t)(12408))

// Агрегат UR400

// КЗ(автомат) фидера 3
#define KEY_FID3_AUT ((uint32_t)(18011))
// Автомат фидера 3 включен
#define KEY_FID3_AUT_OP ((uint32_t)(18012))
// Контактор фидера 3
#define KEY_FID3_CONT ((uint32_t)(18013))
// Автомат фидера 3-1
#define KEY_FID3_1_AUT ((uint32_t)(18014))
// Автомат фидера 3-1 включен
#define KEY_FID3_1_AUT_OP ((uint32_t)(18015))
// Контактор фидера 3-1
#define KEY_FID3_1_CONT ((uint32_t)(18016))
// Автомат фидера 3-2
#define KEY_FID3_2_AUT ((uint32_t)(18017))
// Автомат фидера 3-2 включен
#define KEY_FID3_2_AUT_OP ((uint32_t)(18018))
// Контактор фидера 3-2
#define KEY_FID3_2_CONT ((uint32_t)(18019))
// Автомат фидера 4
#define KEY_FID4_AUT ((uint32_t)(18020))
// Автомат фидера 4 включен
#define KEY_FID4_AUT_OP ((uint32_t)(18021))
// Контактор фидера 4
#define KEY_FID4_CONT ((uint32_t)(18022))
// Автомат трансформатора 1
#define KEY_TRANS_AUT ((uint32_t)(18023))
// Автомат трансформатора 1 включен
#define KEY_TRANS_AUT_OP ((uint32_t)(18024))
// Автомат трансформатора 2
#define KEY_TRANS2_AUT ((uint32_t)(18025))
// Автомат трансформатора 2 включен
#define KEY_TRANS2_AUT_OP ((uint32_t)(18001))
// Автомат СИПТ
#define KEY_SIPT_AUT ((uint32_t)(18300))
// Автомат СИПТ отключен
#define KEY_SIPT_AUT_OP ((uint32_t)(18301))
// Автомат заряда АБ ХД
#define KEY_AB_SHASSIS_AUT ((uint32_t)(18302))
// Автомат заряда АБ ХД отключен
#define KEY_AB_SHASSIS_AUT_OP ((uint32_t)(18303))
// Автомат вентиляторов
#define KEY_VENT_AUT ((uint32_t)(18304))
// Автомат вентиляторов отключен
#define KEY_VENT_AUT_OP ((uint32_t)(18305))
// Контактор вентиляторов
#define KEY_VENT_CONT ((uint32_t)(18002))
// Контактор фидера 3
#define KEY_CONT_FID3 ((uint32_t)(18306))
// Контактор фидера 3-1
#define KEY_CONT_FID3_1 ((uint32_t)(18307))
// Контактор фидера 3-2
#define KEY_CONT_FID3_2 ((uint32_t)(18308))
// Контактор фидера 4
#define KEY_CONT_FID4 ((uint32_t)(18309))
// Контактор вентиляторов
#define KEY_CONT_VENT ((uint32_t)(18310))

// Агрегат UR230

// Автомат фидера 1
#define KEY_FID1_AUT ((uint32_t)(19001))
// Автомат фидера 1 включен
#define KEY_FID1_AUT_OP ((uint32_t)(19002))
// Контактор фидера 1
#define KEY_FID1_CONT ((uint32_t)(19003))
// Автомат фидера 2
#define KEY_FID2_AUT ((uint32_t)(19300))
// Автомат фидера 2 включен
#define KEY_FID2_AUT_OP ((uint32_t)(19301))
// Контактор фидера 2
#define KEY_FID2_CONT ((uint32_t)(19004))
// Автомат фидера 22
#define KEY_FID22_AUT ((uint32_t)(19302))
// Автомат фидера 22 включен
#define KEY_FID22_AUT_OP ((uint32_t)(19303))
// Контактор фидера 22
#define KEY_FID22_CONT ((uint32_t)(19304))
// Контактор фидера 1
#define KEY_CONT_FID1 ((uint32_t)(19305))
// Контактор фидера 2
#define KEY_CONT_FID2 ((uint32_t)(19306))
// Контактор фидера 22
#define KEY_CONT_FID22 ((uint32_t)(19307))
// КЗ(отключен) автомат защиты фидера 1
#define KEY_EA336 ((uint32_t)(19308))
// Отключен автомат защиты фидера 1
#define KEY_EP336 ((uint32_t)(19309))
// КЗ(отключен) автомат защиты фидера 3
#define KEY_EA337 ((uint32_t)(19310))
// Отключен автомат защиты фидера 3
#define KEY_EP337 ((uint32_t)(19311))
// КЗ(отключен) автомат защиты фидера 3-1
#define KEY_EA338 ((uint32_t)(19312))
// Отключен автомат защиты фидера 3-1
#define KEY_EP338 ((uint32_t)(19313))
// КЗ(отключен) автомат защиты фидера 3-2
#define KEY_EA339 ((uint32_t)(19314))
// Отключен автомат защиты фидера 3-2
#define KEY_EP339 ((uint32_t)(19315))
// КЗ(отключен) автомат защиты фидера 4
#define KEY_EA346 ((uint32_t)(19316))
// Отключен автомат защиты фидера 4
#define KEY_EP346 ((uint32_t)(19317))
// КЗ(отключен) автомат защиты трансформатора 1
#define KEY_EA347 ((uint32_t)(19318))
// Отключен автомат защиты трансформатора 1
#define KEY_EP347 ((uint32_t)(19319))
// КЗ(отключен) автомат защиты трансформатора 2
#define KEY_EA348 ((uint32_t)(19320))
// Отключен автомат защиты трансформатора 2
#define KEY_EP348 ((uint32_t)(19321))
// КЗ(отключен) автомат защиты фидера 5
#define KEY_EA349 ((uint32_t)(19322))
// Отключен автомат защиты фидера 5
#define KEY_EP349 ((uint32_t)(19323))
// КЗ(отключен) автомат защиты фидера 5-1
#define KEY_EA351 ((uint32_t)(19324))
// Отключен автомат защиты фидера 5-1
#define KEY_EP351 ((uint32_t)(19325))
// КЗ(отключен) автомат защиты фидера 6
#define KEY_EA353 ((uint32_t)(19326))
// Отключен автомат защиты фидера 6
#define KEY_EP353 ((uint32_t)(19327))
// КЗ(отключен) автомат защиты фидера 6-1
#define KEY_EA356 ((uint32_t)(19328))
// Отключен автомат защиты фидера 6-1
#define KEY_EP356 ((uint32_t)(19329))
// КЗ(отключен) автомат защиты фидера 7
#define KEY_EA357 ((uint32_t)(19330))
// Отключен автомат защиты фидера 7
#define KEY_EP357 ((uint32_t)(19331))
// КЗ(отключен) автомат защиты фидера 8
#define KEY_EA358 ((uint32_t)(19332))
// Отключен автомат защиты фидера 8
#define KEY_EP358 ((uint32_t)(19333))
// КЗ(отключен) автомат защиты фидера 9
#define KEY_EA359 ((uint32_t)(19334))
// Отключен автомат защиты фидера 9
#define KEY_EP359 ((uint32_t)(19335))
// КЗ(отключен) автомат защиты фидера 10
#define KEY_EA360 ((uint32_t)(19336))
// Отключен автомат защиты фидера 10
#define KEY_EP360 ((uint32_t)(19337))
// КЗ(отключен) автомат защиты фидера 11
#define KEY_EA361 ((uint32_t)(19338))
// Отключен автомат защиты фидера 11
#define KEY_EP361 ((uint32_t)(19339))
// КЗ(отключен) автомат защиты фидера 11-1
#define KEY_EA362 ((uint32_t)(19340))
// Отключен автомат защиты фидера 11-1
#define KEY_EP362 ((uint32_t)(19341))
// КЗ(отключен) автомат защиты фидера 12
#define KEY_EA363 ((uint32_t)(19342))
// Отключен автомат защиты фидера 12
#define KEY_EP363 ((uint32_t)(19343))
// КЗ(отключен) автомат защиты фидера 13
#define KEY_EA364 ((uint32_t)(19344))
// Отключен автомат защиты фидера 13
#define KEY_EP364 ((uint32_t)(19345))
// КЗ(отключен) автомат защиты фидера 14
#define KEY_EA365 ((uint32_t)(19346))
// Отключен автомат защиты фидера 14
#define KEY_EP365 ((uint32_t)(19347))
// КЗ(отключен) автомат защиты фидера 15
#define KEY_EA366 ((uint32_t)(19348))
// Отключен автомат защиты фидера 15
#define KEY_EP366 ((uint32_t)(19349))
// КЗ(отключен) автомат защиты фидера 16
#define KEY_EA367 ((uint32_t)(19350))
// Отключен автомат защиты фидера 16
#define KEY_EP367 ((uint32_t)(19351))
// КЗ(отключен) автомат защиты фидера 16-1
#define KEY_EA368 ((uint32_t)(19352))
// Отключен автомат защиты фидера 16-1
#define KEY_EP368 ((uint32_t)(19353))
// КЗ(отключен) автомат защиты фидера 2
#define KEY_EA369 ((uint32_t)(19354))
// Отключен автомат защиты фидера 2
#define KEY_EP369 ((uint32_t)(19355))
// КЗ(отключен) автомат защиты фидера 17
#define KEY_EA370 ((uint32_t)(19356))
// КЗ(отключен) автомат защиты фидера 18
#define KEY_EA371 ((uint32_t)(19357))
// КЗ(отключен) автомат защиты фидера 22
#define KEY_EA372 ((uint32_t)(19358))
// Отключен автомат защиты фидера 22
#define KEY_EP372 ((uint32_t)(19359))
// Контроль включения контактора фидера 22
#define KEY_LIM_WAIT_KFID22_ON ((uint32_t)(19360))
// Контроль включения контактора фидера 22
#define KEY_LIM_WAIT_KFID22_OFF ((uint32_t)(19361))
// Контроль КЗ(отключен) автомат защиты фидера 1
#define KEY_LIM_FID1_AUT ((uint32_t)(19362))
// Контроль состояния автомата защиты фидера 1
#define KEY_LIM_FID1_AUT_OP ((uint32_t)(19363))
// Контроль КЗ(отключен) автомат защиты фидера 3
#define KEY_LIM_FID3_AUT ((uint32_t)(19364))
// Контроль состояния автомата защиты фидера 3
#define KEY_LIM_FID3_AUT_OP ((uint32_t)(19365))
// Контроль КЗ(отключен) автомат защиты фидера 3-1
#define KEY_LIM_FID3_1_AUT ((uint32_t)(19366))
// Контроль состояния автомата защиты фидера 3-1
#define KEY_LIM_FID3_1_AUT_OP ((uint32_t)(19367))
// Контроль КЗ(отключен) автомат защиты фидера 3-2
#define KEY_LIM_FID3_2_AUT ((uint32_t)(19368))
// Контроль состояния автомата защиты фидера 3-2
#define KEY_LIM_FID3_2_AUT_OP ((uint32_t)(19369))
// Контроль КЗ(отключен) автомат защиты фидера 4
#define KEY_LIM_FID4_AUT ((uint32_t)(19370))
// Контроль состояния автомата защиты фидера 4
#define KEY_LIM_FID4_AUT_OP ((uint32_t)(19371))
// Контроль КЗ(отключен) автомат защиты трансформатора 1
#define KEY_LIM_TRANS_AUT ((uint32_t)(19372))
// Контроль состояния автомата защиты трансформатора 1
#define KEY_LIM_TRANS_AUT_OP ((uint32_t)(19373))
// Контроль КЗ(отключен) автомат защиты трансформатора 2
#define KEY_LIM_TRANS2_AUT ((uint32_t)(19374))
// Контроль состояния автомата защиты трансформатора 2
#define KEY_LIM_TRANS2_AUT_OP ((uint32_t)(19375))
// Контроль КЗ(отключен) автомат защиты фидера 5
#define KEY_LIM_FID5_AUT ((uint32_t)(19376))
// Контроль состояния автомата защиты фидера 5
#define KEY_LIM_FID5_AUT_OP ((uint32_t)(19377))
// Контроль КЗ(отключен) автомат защиты фидера 5-1
#define KEY_LIM_FID5_1_AUT ((uint32_t)(19378))
// Контроль состояния автомата защиты фидера 5-1
#define KEY_LIM_FID5_1_AUT_OP ((uint32_t)(19379))
// Контроль КЗ(отключен) автомат защиты фидера 6
#define KEY_LIM_FID6_AUT ((uint32_t)(19380))
// Контроль состояния автомата защиты фидера 6
#define KEY_LIM_FID6_AUT_OP ((uint32_t)(19381))
// Контроль КЗ(отключен) автомат защиты фидера 6-1
#define KEY_LIM_FID6_1_AUT ((uint32_t)(19382))
// Контроль состояния автомата защиты фидера 6
#define KEY_LIM_FID6_1_AUT_OP ((uint32_t)(19383))
// Контроль КЗ(отключен) автомат защиты фидера 7
#define KEY_LIM_FID7_AUT ((uint32_t)(19384))
// Контроль состояния автомата защиты фидера 7
#define KEY_LIM_FID7_AUT_OP ((uint32_t)(19385))
// Контроль КЗ(отключен) автомат защиты фидера 8
#define KEY_LIM_FID8_AUT ((uint32_t)(19386))
// Контроль состояния автомата защиты фидера 8
#define KEY_LIM_FID8_AUT_OP ((uint32_t)(19387))
// Контроль КЗ(отключен) автомат защиты фидера 9
#define KEY_LIM_FID9_AUT ((uint32_t)(19388))
// Контроль состояния автомата защиты фидера 9
#define KEY_LIM_FID9_AUT_OP ((uint32_t)(19389))
// Контроль КЗ(отключен) автомат защиты фидера 10
#define KEY_LIM_FID10_AUT ((uint32_t)(19390))
// Контроль состояния автомата защиты фидера 10
#define KEY_LIM_FID10_AUT_OP ((uint32_t)(19391))
// Контроль КЗ(отключен) автомат защиты фидера 11
#define KEY_LIM_FID11_AUT ((uint32_t)(19392))
// Контроль состояния автомата защиты фидера 11
#define KEY_LIM_FID11_AUT_OP ((uint32_t)(19393))
// Контроль КЗ(отключен) автомат защиты фидера 11-1
#define KEY_LIM_FID11_1_AUT ((uint32_t)(19394))
// Контроль состояния автомата защиты фидера 11
#define KEY_LIM_FID11_1_AUT_OP ((uint32_t)(19395))
// Контроль КЗ(отключен) автомат защиты фидера 12
#define KEY_LIM_FID12_AUT ((uint32_t)(19396))
// Контроль состояния автомата защиты фидера 12
#define KEY_LIM_FID12_AUT_OP ((uint32_t)(19397))
// Контроль КЗ(отключен) автомат защиты фидера 13
#define KEY_LIM_FID13_AUT ((uint32_t)(19398))
// Контроль состояния автомата защиты фидера 13
#define KEY_LIM_FID13_AUT_OP ((uint32_t)(19399))
// Контроль КЗ(отключен) автомат защиты фидера 14
#define KEY_LIM_FID14_AUT ((uint32_t)(19400))
// Контроль состояния автомата защиты фидера 14
#define KEY_LIM_FID14_AUT_OP ((uint32_t)(19401))
// Контроль КЗ(отключен) автомат защиты фидера 15
#define KEY_LIM_FID15_AUT ((uint32_t)(19402))
// Контроль состояния автомата защиты фидера 15
#define KEY_LIM_FID15_AUT_OP ((uint32_t)(19403))
// Контроль КЗ(отключен) автомат защиты фидера 16
#define KEY_LIM_FID16_AUT ((uint32_t)(19404))
// Контроль состояния автомата защиты фидера 16
#define KEY_LIM_FID16_AUT_OP ((uint32_t)(19405))
// Контроль КЗ(отключен) автомат защиты фидера 16-1
#define KEY_LIM_FID16_1_AUT ((uint32_t)(19406))
// Контроль состояния автомата защиты фидера 16-1
#define KEY_LIM_FID16_1_AUT_OP ((uint32_t)(19407))
// Контроль КЗ(отключен) автомат защиты фидера 2
#define KEY_LIM_FID2_AUT ((uint32_t)(19408))
// Контроль состояния автомата защиты фидера 2
#define KEY_LIM_FID2_AUT_OP ((uint32_t)(19409))
// Контроль состояния автомата защиты фидера 17
#define KEY_LIM_FID17_AUT ((uint32_t)(19410))
// Контроль состояния автомата защиты фидера 18
#define KEY_LIM_FID18_AUT ((uint32_t)(19411))
// Контроль КЗ(отключен) автомат защиты фидера 22
#define KEY_LIM_FID22_AUT ((uint32_t)(19412))
// Контроль состояния автомата защиты фидера 22
#define KEY_LIM_FID22_AUT_OP ((uint32_t)(19413))

// Агрегат BK220

// Автомат фидера 5
#define KEY_FID5_AUT ((uint32_t)(20010))
// Автомат фидера 5 включен
#define KEY_FID5_AUT_OP ((uint32_t)(20011))
// Контактор фидера 5
#define KEY_FID5_CONT ((uint32_t)(20012))
// Автомат фидера 5-1
#define KEY_FID5_1_AUT ((uint32_t)(20013))
// Автомат фидера 5-1 включен
#define KEY_FID5_1_AUT_OP ((uint32_t)(20014))
// Контактор фидера 5-1
#define KEY_FID5_1_CONT ((uint32_t)(20015))
// Автомат фидера 6
#define KEY_FID6_AUT ((uint32_t)(20016))
// Автомат фидера 6 включен
#define KEY_FID6_AUT_OP ((uint32_t)(20017))
// Контактор фидера 6
#define KEY_FID6_CONT ((uint32_t)(20018))
// Автомат фидера 6-1
#define KEY_FID6_1_AUT ((uint32_t)(20019))
// Автомат фидера 6-1 включен
#define KEY_FID6_1_AUT_OP ((uint32_t)(20020))
// Контактор фидера 6-1
#define KEY_FID6_1_CONT ((uint32_t)(20021))
// Автомат фидера 7
#define KEY_FID7_AUT ((uint32_t)(20022))
// Автомат фидера 7 включен
#define KEY_FID7_AUT_OP ((uint32_t)(20023))
// Контактор фидера 7
#define KEY_FID7_CONT ((uint32_t)(20024))
// Автомат фидера 8
#define KEY_FID8_AUT ((uint32_t)(20025))
// Автомат фидера 8 включен
#define KEY_FID8_AUT_OP ((uint32_t)(20026))
// Контактор фидера 8
#define KEY_FID8_CONT ((uint32_t)(20027))
// Автомат фидера 9
#define KEY_FID9_AUT ((uint32_t)(20028))
// Автомат фидера 9 включен
#define KEY_FID9_AUT_OP ((uint32_t)(20029))
// Контактор фидера 9
#define KEY_FID9_CONT ((uint32_t)(20030))
// Автомат фидера 10
#define KEY_FID10_AUT ((uint32_t)(20031))
// Автомат фидера 10 включен
#define KEY_FID10_AUT_OP ((uint32_t)(20032))
// Контактор фидера 10
#define KEY_FID10_CONT ((uint32_t)(20033))
// Автомат фидера 11
#define KEY_FID11_AUT ((uint32_t)(20034))
// Автомат фидера 11 включен
#define KEY_FID11_AUT_OP ((uint32_t)(20035))
// Контактор фидера 11
#define KEY_FID11_CONT ((uint32_t)(20036))
// Автомат фидера 11-1
#define KEY_FID11_1_AUT ((uint32_t)(20037))
// Автомат фидера 11-1 включен
#define KEY_FID11_1_AUT_OP ((uint32_t)(20038))
// Контактор фидера 11-1
#define KEY_FID11_1_CONT ((uint32_t)(20039))
// Автомат фидера 12
#define KEY_FID12_AUT ((uint32_t)(20040))
// Автомат фидера 12 включен
#define KEY_FID12_AUT_OP ((uint32_t)(20041))
// Контактор фидера 12
#define KEY_FID12_CONT ((uint32_t)(20042))
// Автомат фидера 13
#define KEY_FID13_AUT ((uint32_t)(20043))
// Автомат фидера 13 включен
#define KEY_FID13_AUT_OP ((uint32_t)(20044))
// Контактор фидера 13
#define KEY_FID13_CONT ((uint32_t)(20045))
// Автомат фидера 14
#define KEY_FID14_AUT ((uint32_t)(20046))
// Автомат фидера 14 включен
#define KEY_FID14_AUT_OP ((uint32_t)(20047))
// Контактор фидера 14
#define KEY_FID14_CONT ((uint32_t)(20048))
// Автомат фидера 15
#define KEY_FID15_AUT ((uint32_t)(20049))
// Автомат фидера 15 включен
#define KEY_FID15_AUT_OP ((uint32_t)(20050))
// Контактор фидера 15
#define KEY_FID15_CONT ((uint32_t)(20051))
// Автомат фидера 16
#define KEY_FID16_AUT ((uint32_t)(20052))
// Автомат фидера 16 включен
#define KEY_FID16_AUT_OP ((uint32_t)(20053))
// Контактор фидера 16
#define KEY_FID16_CONT ((uint32_t)(20054))
// Автомат фидера 16-1
#define KEY_FID16_1_AUT ((uint32_t)(20055))
// Автомат фидера 16-1 включен
#define KEY_FID16_1_AUT_OP ((uint32_t)(20056))
// Контактор фидера 16-1
#define KEY_FID16_1_CONT ((uint32_t)(20057))
// Контактор фидера 5
#define KEY_CONT_FID5 ((uint32_t)(20300))
// Контактор фидера 5-1
#define KEY_CONT_FID5_1 ((uint32_t)(20301))
// Контактор фидера 6
#define KEY_CONT_FID6 ((uint32_t)(20302))
// Контактор фидера 6-1
#define KEY_CONT_FID6_1 ((uint32_t)(20303))
// Контактор фидера 7
#define KEY_CONT_FID7 ((uint32_t)(20304))
// Контактор фидера 8
#define KEY_CONT_FID8 ((uint32_t)(20305))
// Контактор фидера 9
#define KEY_CONT_FID9 ((uint32_t)(20306))
// Контактор фидера 10
#define KEY_CONT_FID10 ((uint32_t)(20307))
// Контактор фидера 11
#define KEY_CONT_FID11 ((uint32_t)(20308))
// Контактор фидера 11-1
#define KEY_CONT_FID11_1 ((uint32_t)(20309))
// Контактор фидера 12
#define KEY_CONT_FID12 ((uint32_t)(20310))
// Контактор фидера 13
#define KEY_CONT_FID13 ((uint32_t)(20311))
// Контактор фидера 14
#define KEY_CONT_FID14 ((uint32_t)(20312))
// Контактор фидера 15
#define KEY_CONT_FID15 ((uint32_t)(20313))
// Контактор фидера 16
#define KEY_CONT_FID16 ((uint32_t)(20314))
// Контактор фидера 16-1
#define KEY_CONT_FID16_1 ((uint32_t)(20315))
// Не норма изоляции 400 Гц
#define KEY_EP416 ((uint32_t)(20316))
// Контроль включения контактора фидера 5, БУ400 7001
#define KEY_LIM_WAIT_KFID5_ON ((uint32_t)(20317))
// Контроль отключения контактора фидера 5, БУ400 7001
#define KEY_LIM_WAIT_KFID5_OFF ((uint32_t)(20318))
// Контроль включения контактора фидера 5-1, БУ400 7001
#define KEY_LIM_WAIT_KFID5_1_ON ((uint32_t)(20319))
// Контроль отключения контактора фидера 5-1, БУ400 7001
#define KEY_LIM_WAIT_KFID5_1_OFF ((uint32_t)(20320))
// Контроль включения контактора фидера 6, БУ400 7001
#define KEY_LIM_WAIT_KFID6_ON ((uint32_t)(20321))
// Контроль отключения контактора фидера 6, БУ400 7001
#define KEY_LIM_WAIT_KFID6_OFF ((uint32_t)(20322))
// Контроль включения контактора фидера 6-1, БУ400 7001
#define KEY_LIM_WAIT_KFID6_1_ON ((uint32_t)(20323))
// Контроль отключения контактора фидера 6-1, БУ400 7001
#define KEY_LIM_WAIT_KFID6_1_OFF ((uint32_t)(20324))
// Контроль включения контактора фидера 7, БУ400 7001
#define KEY_LIM_WAIT_KFID7_ON ((uint32_t)(20325))
// Контроль отключения контактора фидера 7, БУ400 7001
#define KEY_LIM_WAIT_KFID7_OFF ((uint32_t)(20326))
// Контроль включения контактора фидера 8, БУ400 7001
#define KEY_LIM_WAIT_KFID8_ON ((uint32_t)(20327))
// Контроль отключения контактора фидера 8, БУ400 7001
#define KEY_LIM_WAIT_KFID8_OFF ((uint32_t)(20328))
// Контроль включения контактора фидера 9, БУ400 7001
#define KEY_LIM_WAIT_KFID9_ON ((uint32_t)(20329))
// Контроль отключения контактора фидера 9, БУ400 7001
#define KEY_LIM_WAIT_KFID9_OFF ((uint32_t)(20330))
// Контроль включения контактора фидера 10, БУ400 7001
#define KEY_LIM_WAIT_KFID10_ON ((uint32_t)(20331))
// Контроль отключения контактора фидера 10, БУ400 7001
#define KEY_LIM_WAIT_KFID10_OFF ((uint32_t)(20332))
// Контроль включения контактора фидера 11, БУ400 7001
#define KEY_LIM_WAIT_KFID11_ON ((uint32_t)(20333))
// Контроль отключения контактора фидера 11, БУ400 7001
#define KEY_LIM_WAIT_KFID11_OFF ((uint32_t)(20334))
// Контроль включения контактора фидера 11-1, БУ400 7001
#define KEY_LIM_WAIT_KFID11_1_ON ((uint32_t)(20335))
// Контроль отключения контактора фидера 11-1, БУ400 7001
#define KEY_LIM_WAIT_KFID11_1_OFF ((uint32_t)(20336))
// Контроль включения контактора фидера 12, БУ400 7001
#define KEY_LIM_WAIT_KFID12_ON ((uint32_t)(20337))
// Контроль отключения контактора фидера 12, БУ400 7001
#define KEY_LIM_WAIT_KFID12_OFF ((uint32_t)(20338))
// Контроль включения контактора фидера 13, БУ400 7001
#define KEY_LIM_WAIT_KFID13_ON ((uint32_t)(20339))
// Контроль отключения контактора фидера 13, БУ400 7001
#define KEY_LIM_WAIT_KFID13_OFF ((uint32_t)(20340))
// Контроль включения контактора фидера 14, БУ400 7001
#define KEY_LIM_WAIT_KFID14_ON ((uint32_t)(20341))
// Контроль отключения контактора фидера 14, БУ400 7001
#define KEY_LIM_WAIT_KFID14_OFF ((uint32_t)(20342))
// Контроль включения контактора фидера 15, БУ400 7001
#define KEY_LIM_WAIT_KFID15_ON ((uint32_t)(20343))
// Контроль отключения контактора фидера 15, БУ400 7001
#define KEY_LIM_WAIT_KFID15_OFF ((uint32_t)(20344))
// Контроль включения контактора фидера 16, БУ400 7001
#define KEY_LIM_WAIT_KFID16_ON ((uint32_t)(20345))
// Контроль отключения контактора фидера 16, БУ400 7001
#define KEY_LIM_WAIT_KFID16_OFF ((uint32_t)(20346))
// Контроль включения контактора фидера 16-1, БУ400 7001
#define KEY_LIM_WAIT_KFID16_1_ON ((uint32_t)(20347))
// Контроль отключения контактора фидера 16-1, БУ400 7001
#define KEY_LIM_WAIT_KFID16_1_OFF ((uint32_t)(20348))

// Агрегат UR27

// U АБ СТ, В
#define KEY_U_AB_STARTER ((uint32_t)(21002))
// Режим работы люков забора
#define KEY_H_MODE ((uint32_t)(21008))
// Режим работы люков выброса
#define KEY_H_MODE_2 ((uint32_t)(21009))
// U аккумулятора ОП, В
#define KEY_U_AB_OP ((uint32_t)(21010))
// U АБ ХД, В
#define KEY_U_AB_SHASSIS ((uint32_t)(21300))
// Ручное управление вентиляторами
#define KEY_VENT_MANUAL ((uint32_t)(21011))
// Автоматическое управление вентиляторами
#define KEY_VENT_AUTOMATIC ((uint32_t)(21012))
// Контактор фидера 17
#define KEY_FID17_CONT ((uint32_t)(21301))
// КЗ (отключен) автомат защиты фидера 17
#define KEY_FID17_AUT ((uint32_t)(21302))
// Автомат фидера 17 включен
#define KEY_FID17_AUT_OP ((uint32_t)(21303))
// Контактор фидера 18
#define KEY_FID18_CONT ((uint32_t)(21304))
// Автомат фидера 18
#define KEY_FID18_AUT ((uint32_t)(21305))
// Автомат экстренного отключения
#define KEY_Q6_AUT ((uint32_t)(21306))
// Контактор заряда АБ ХД
#define KEY_AB_SHASSIS_CONT ((uint32_t)(21307))
// Контактор массы АБ ХД
#define KEY_MASS_AB_SHASSIS_CONT ((uint32_t)(21308))
// АБ ХД на массе
#define KEY_MASS_AB_SHASSIS ((uint32_t)(21309))
// Питание САУ от АБ ХД
#define KEY_SAU_FROM_AB_SHASSIS ((uint32_t)(21310))
// Норма СИПТ
#define KEY_SIPT_NORM ((uint32_t)(21311))
// Контактор фидера 17
#define KEY_CONT_FID17 ((uint32_t)(21312))
// Контактор фидера 18
#define KEY_CONT_FID18 ((uint32_t)(21313))
// Контактор заряда АБ ХД
#define KEY_CONT_AB_SHASSIS ((uint32_t)(21314))
// Контактор массы АБ ХД
#define KEY_CONT_MASS_AB_SHASSIS ((uint32_t)(21315))
// Не норма ПС
#define KEY_SIPT_NO_NORM ((uint32_t)(21316))
// U АБ СТ сырое
#define KEY_U_AB_STARTER_RAW ((uint32_t)(21317))
// U аккумулятора ОП сырое
#define KEY_U_AB_OP_RAW ((uint32_t)(21318))
// Контроль включения контактора фидера 17
#define KEY_LIM_WAIT_KFID17_ON ((uint32_t)(21319))
// Контроль включения контактора фидера 17
#define KEY_LIM_WAIT_KFID17_OFF ((uint32_t)(21320))
// Контроль включения контактора фидера 18
#define KEY_LIM_WAIT_KFID18_ON ((uint32_t)(21321))
// Контроль включения контактора фидера 18
#define KEY_LIM_WAIT_KFID18_OFF ((uint32_t)(21322))

// Агрегат FUEL_PUMP

// Уровень топлива во внутреннем баке с датчика, мм*10^-1
#define KEY_LEVEL_FUEL ((uint32_t)(23300))
// Уровень топлива во внешнем баке с датчика, мм*10^-1
#define KEY_LEVEL_EXT_FUEL ((uint32_t)(23301))
// Градиент уровня топлива во внутреннем баке
#define KEY_GRADIENT_LEVEL_FUEL ((uint32_t)(23302))
// Градиент уровня топлива во внешнем баке
#define KEY_GRADIENT_LEVEL_EXT_FUEL ((uint32_t)(23303))
// Состояние НЗТ
#define KEY_NZT_STATE ((uint32_t)(23304))
// Уровень топлива во внутреннем баке, вычисляемый, %
#define KEY_LEVEL_FUEL_CALC ((uint32_t)(23305))
// Уровень топлива во внешнем баке, вычисляемый, %
#define KEY_LEVEL_EXT_FUEL_CALC ((uint32_t)(23306))
// Внутренний ДНУТ залит
#define KEY_LOW_FUEL_EXT ((uint32_t)(23307))
// Внешний ДНУТ залит
#define KEY_LOW_EXT_FUEL_EXT ((uint32_t)(23308))
// Режим работы НЗТ
#define KEY_NZT_MODE ((uint32_t)(23309))
// Выбор бака НЗТ
#define KEY_NZT_SELECTED_TANK ((uint32_t)(23011))
// Включить контактор НЗТ
#define KEY_PUMP_ON ((uint32_t)(23310))
// Внeшний ДНУТ залит
#define KEY_LOW_FUEL ((uint32_t)(23311))
// Внутренний ДНУТ залит
#define KEY_LOW_EXT_FUEL ((uint32_t)(23312))
// Включен контактор НЗТ
#define KEY_ON_PUMP ((uint32_t)(23313))
// Контроль по включению порога низкого уровня топлива бака 1
#define KEY_LEVEL_FUEL_LIM1 ((uint32_t)(23314))
// Контроль по включению порога низкого уровня топлива бака 2
#define KEY_LEVEL_FUEL_LIM2 ((uint32_t)(23315))
// Отказ НЗТ
#define KEY_EA350 ((uint32_t)(23316))
// Отказ контактора НЗТ
#define KEY_EP006 ((uint32_t)(23317))
// Кончилось топливо в баке 1
#define KEY_EA354 ((uint32_t)(23020))
// Кончилось топливо в баке 2
#define KEY_EA355 ((uint32_t)(23021))
// Контроль включения реле НЗТ
#define KEY_LIM_WAIT_RFP_ON ((uint32_t)(23318))
// Контроль отключения реле НЗТ
#define KEY_LIM_WAIT_RFP_OFF ((uint32_t)(23319))
// Аварийный уровень топлива бака 1
#define KEY_LIM_ALARM_FUEL_TANK1 ((uint32_t)(23320))
// Аварийный уровень топлива бака 2
#define KEY_LIM_ALARM_FUEL_TANK2 ((uint32_t)(23321))
// Низкий уровень топлива бака 1
#define KEY_LIM_LOW_LEVEL_FUEL_TANK1 ((uint32_t)(23322))
// Низкий уровень топлива бака 2
#define KEY_LIM_LOW_LEVEL_FUEL_TANK2 ((uint32_t)(23323))
// Контроль по включению порога по низкому уровню топлива бака 1
#define KEY_LIM_LEVEL_FUEL1 ((uint32_t)(23324))
// Контроль по включению порога по низкому уровню топлива бака 2
#define KEY_LIM_LEVEL_FUEL2 ((uint32_t)(23325))

// Агрегат HATCH_1

// Состояние люка забора 1
#define KEY_HATCH_1_STATE ((uint32_t)(24300))
// Открыть люк забора 1
#define KEY_HATCH_1_O ((uint32_t)(24301))
// Закрыть люк забора 1
#define KEY_HATCH_1_C ((uint32_t)(24302))
// Люк забора 1 открыт
#define KEY_O_H_1 ((uint32_t)(24303))
// Люк забора 1 закрыт
#define KEY_C_H_1 ((uint32_t)(24304))
// Включено реле открытия люка забора 1
#define KEY_ON_O_H_1 ((uint32_t)(24305))
// Включено реле закрытия люка забора 1
#define KEY_ON_C_H_1 ((uint32_t)(24306))
// Закрытие всех люков по команде
#define KEY_CLOSING_HATCHES ((uint32_t)(24307))
// Отказ люка забора 1
#define KEY_EA340 ((uint32_t)(24308))

// Агрегат HATCH_2

// Состояние люка выброса 1
#define KEY_HATCH_2_STATE ((uint32_t)(25300))
// Отказ люка забора 2
#define KEY_HATCH_2_BREAK ((uint32_t)(25301))
// Открыть люк забора 2
#define KEY_HATCH_2_O ((uint32_t)(25302))
// Закрыть люк забора 2
#define KEY_HATCH_2_C ((uint32_t)(25303))
// Люк забора 2 открыт
#define KEY_O_H_2 ((uint32_t)(25304))
// Люк забора 2 закрыт
#define KEY_C_H_2 ((uint32_t)(25305))
// Включено реле открытия люка забора 2
#define KEY_ON_O_H_2 ((uint32_t)(25306))
// Включено реле закрытия люка забора 2
#define KEY_ON_C_H_2 ((uint32_t)(25307))
// Отказ люка забора 2
#define KEY_EA341 ((uint32_t)(25308))
// Контроль отказа люка забора 2
#define KEY_LIM_HATCH_2_BREAK ((uint32_t)(25309))

// Агрегат HATCH_3

// Состояние люка забора 3
#define KEY_HATCH_3_STATE ((uint32_t)(26300))
// Отказ люка забора 3
#define KEY_HATCH_IN2_BREAK ((uint32_t)(26301))
// Открыть люк забора 3
#define KEY_HATCH_3_O ((uint32_t)(26302))
// Закрыть люк забора 3
#define KEY_HATCH_3_C ((uint32_t)(26303))
// Люк забора 3 открыт
#define KEY_O_H_3 ((uint32_t)(26304))
// Люк забора 3 закрыт
#define KEY_C_H_3 ((uint32_t)(26305))
// Включено реле открытия люка забора 3
#define KEY_ON_O_H_3 ((uint32_t)(26306))
// Включено реле закрытия люка забора 3
#define KEY_ON_C_H_3 ((uint32_t)(26307))
// Отказ люка забора 3
#define KEY_EA342 ((uint32_t)(26308))
// Контроль отказа люка забора 3
#define KEY_LIM_HATCH_IN2_BREAK ((uint32_t)(26309))

// Агрегат HATCH_4

// Состояние люка забора 4
#define KEY_HATCH_4_STATE ((uint32_t)(27300))
// Отказ люка забора 4
#define KEY_HATCH_4_BREAK ((uint32_t)(27301))
// Открыть люк забора 4
#define KEY_HATCH_4_O ((uint32_t)(27302))
// Закрыть люк забора 4
#define KEY_HATCH_4_C ((uint32_t)(27303))
// Люк забора 4 открыт
#define KEY_O_H_4 ((uint32_t)(27304))
// Люк забора 4 закрыт
#define KEY_C_H_4 ((uint32_t)(27305))
// Включено реле открытия люка забора 4
#define KEY_ON_O_H_4 ((uint32_t)(27306))
// Включено реле закрытия люка забора 4
#define KEY_ON_C_H_4 ((uint32_t)(27307))
// Отказ люка забора 4
#define KEY_EA343 ((uint32_t)(27308))
// Контроль отказа люка забора 4
#define KEY_LIM_HATCH_4_BREAK ((uint32_t)(27309))

// Агрегат PDU

// Наличие последовательного ДУ
#define KEY_VOLS_CONNECTED ((uint32_t)(28300))
// Наличие параллельного ДУ
#define KEY_PDU_CONNECTED ((uint32_t)(28301))
// Кoманда параллельного ДУ
#define KEY_PDU_COMMAND ((uint32_t)(28000))
// Дистанционный режим (параллельный интерфейс)
#define KEY_PDU_MODE ((uint32_t)(28302))
// Дистанционный режим (последовательный интерфейс)
#define KEY_VOLS_MODE ((uint32_t)(28303))
// Местный режим
#define KEY_LOCAL_MODE ((uint32_t)(28304))
// Меандр 1 Гц
#define KEY_MEANDR_1_HZ ((uint32_t)(28305))
// Разрешение меандра
#define KEY_MEANDR_OUT ((uint32_t)(28306))
// Сводный параметр для послед. интерфейса
#define KEY_PDU_SUMM_PRM ((uint32_t)(28307))
// Готовность ЭА
#define KEY_EA_READY_PARAM ((uint32_t)(28308))
// Режим исполняется
#define KEY_MODE_PERFORMING_PARAM ((uint32_t)(28309))
// Неисправность сети 1
#define KEY_NET_ALARM_PARAM ((uint32_t)(28310))
// Готовность сети 1
#define KEY_NET_READY_PARAM ((uint32_t)(28311))
// Режим1 исполняется
#define KEY_MODE1_PERFORMING_PARAM ((uint32_t)(28312))
// Режим2 исполняется
#define KEY_MODE2_PERFORMING_PARAM ((uint32_t)(28313))
// Режим3 исполняется
#define KEY_MODE3_PERFORMING_PARAM ((uint32_t)(28314))
// Режим4 исполняется
#define KEY_MODE4_PERFORMING_PARAM ((uint32_t)(28315))
// Режим5 исполняется
#define KEY_MODE5_PERFORMING_PARAM ((uint32_t)(28316))
// Режим6 исполняется
#define KEY_MODE6_PERFORMING_PARAM ((uint32_t)(28317))
// Готовность ЭА - команда
#define KEY_EA_READY_PDU ((uint32_t)(28318))
// Режим исполняется - команда
#define KEY_MODE_PERFORMING_PDU ((uint32_t)(28319))
// Неисправность сети 1 - команда
#define KEY_NET_ALARM_PDU ((uint32_t)(28320))
// Готовность сети 1 - команда
#define KEY_NET_READY_PDU ((uint32_t)(28321))
// Индикатор пожара
#define KEY_FIRE_PDU ((uint32_t)(28322))
// Индикатор пожара 2
#define KEY_FIRE2_PDU ((uint32_t)(28323))
// Индикатор пожара 3
#define KEY_FIRE3_PDU ((uint32_t)(28324))
// Режим 1 исполняется
#define KEY_MODE1_PERFORMING_PDU ((uint32_t)(28325))
// Режим 2 исполняется
#define KEY_MODE2_PERFORMING_PDU ((uint32_t)(28326))
// Режим 3 исполняется
#define KEY_MODE3_PERFORMING_PDU ((uint32_t)(28327))
// Режим 4 исполняется
#define KEY_MODE4_PERFORMING_PDU ((uint32_t)(28328))
// Режим 5 исполняется
#define KEY_MODE5_PERFORMING_PDU ((uint32_t)(28329))
// Режим 6 исполняется
#define KEY_MODE6_PERFORMING_PDU ((uint32_t)(28330))
// Замыкание на корпус
#define KEY_SHORT_MASS_PDU ((uint32_t)(28331))
// Неисправность СЭС (50 Гц)
#define KEY_SES_ALARM_50HZ_PDU ((uint32_t)(28332))
// Неисправность СЭС (400 Гц)
#define KEY_SES_ALARM_400HZ_PDU ((uint32_t)(28333))
// Авария 400 Гц
#define KEY_ALARM_400HZ_PDU ((uint32_t)(28334))
// ПХЗ, ПАЗ
#define KEY_PDU_PHZ_PAZ ((uint32_t)(28335))
// Отключить СЭС
#define KEY_PDU_SES_OFF ((uint32_t)(28336))
// Дистанционное управление
#define KEY_PDU_DIST ((uint32_t)(28337))
// Местное управление
#define KEY_PDU_LOCAL ((uint32_t)(28338))
// Тревога
#define KEY_PDU_ALARM ((uint32_t)(28339))
// Режим 1
#define KEY_PDU_MODE_1 ((uint32_t)(28340))
// Режим 2
#define KEY_PDU_MODE_2 ((uint32_t)(28341))
// Режим 3
#define KEY_PDU_MODE_3 ((uint32_t)(28342))
// Режим 4
#define KEY_PDU_MODE_4 ((uint32_t)(28343))
// Режим 5
#define KEY_PDU_MODE_5 ((uint32_t)(28344))
// Режим 6
#define KEY_PDU_MODE_6 ((uint32_t)(28345))
// Включить режим 1
#define KEY_LIM_PDU_MODE_1_ON ((uint32_t)(28346))
// Включить режим 1
#define KEY_LIM_PDU_MODE_1_OFF ((uint32_t)(28347))
// Включить режим 2
#define KEY_LIM_PDU_MODE_2_ON ((uint32_t)(28348))
// Включить режим 2
#define KEY_LIM_PDU_MODE_2_OFF ((uint32_t)(28349))
// Включить режим 3
#define KEY_LIM_PDU_MODE_3_ON ((uint32_t)(28350))
// Включить режим 3
#define KEY_LIM_PDU_MODE_3_OFF ((uint32_t)(28351))
// Включить режим 4
#define KEY_LIM_PDU_MODE_4_ON ((uint32_t)(28352))
// Включить режим 4
#define KEY_LIM_PDU_MODE_4_OFF ((uint32_t)(28353))
// Включить режим 5
#define KEY_LIM_PDU_MODE_5_ON ((uint32_t)(28354))
// Включить режим 5
#define KEY_LIM_PDU_MODE_5_OFF ((uint32_t)(28355))
// Включить режим 6
#define KEY_LIM_PDU_MODE_6_ON ((uint32_t)(28356))
// Включить режим 6
#define KEY_LIM_PDU_MODE_6_OFF ((uint32_t)(28357))
// Отключить СЭС
#define KEY_LIM_PDU_SES_OFF_ON ((uint32_t)(28358))
// Отключить СЭС
#define KEY_LIM_PDU_SES_OFF_OFF ((uint32_t)(28359))
// Включить тревогу
#define KEY_LIM_PDU_ALARM_ON ((uint32_t)(28360))
// Включить тревогу
#define KEY_LIM_PDU_ALARM_OFF ((uint32_t)(28361))
// ПХЗ, ПАЗ
#define KEY_LIM_PDU_PHZ_PAZ_ON ((uint32_t)(28362))
// ПХЗ, ПАЗ
#define KEY_LIM_PDU_PHZ_PAZ_OFF ((uint32_t)(28363))

// Агрегат SIPT

// U СИПТ
#define KEY_U_SIPT_EXT ((uint32_t)(29300))
// Наработка СИПТ
#define KEY_SIPT_MOTOHOURS ((uint32_t)(29301))
// Наработка СИПТ, ч
#define KEY_SIPT_HOURS ((uint32_t)(29302))
// Напряжение СИПТ ниже нормы
#define KEY_EP421 ((uint32_t)(29303))
// Напряжение СИПТ выше нормы
#define KEY_EP422 ((uint32_t)(29304))
// Перегруз СИПТ
#define KEY_EP423 ((uint32_t)(29305))
// КЗ СИПТ
#define KEY_EP424 ((uint32_t)(29306))
// Отключен автомат СИПТ
#define KEY_EA425 ((uint32_t)(29307))
// Автомат СИПТ (ПС)
#define KEY_LIM_SIPT_AUT_OP ((uint32_t)(29308))
// Низкое напряжение СИПТ
#define KEY_LIM_U_SIPT_LOW ((uint32_t)(29309))
// Высокое напряжение СИПТ
#define KEY_LIM_U_SIPT_HIGH ((uint32_t)(29310))
// Перегруз СИПТ
#define KEY_LIM_I_SIPT_OVER ((uint32_t)(29311))
// КЗ СИПТ
#define KEY_LIM_I_SIPT_SHORT ((uint32_t)(29312))
// СИПТ включен
#define KEY_LIM_SIPT_NORM ((uint32_t)(29313))
// СИПТ отключен
#define KEY_LIM_NO_SIPT_NORM ((uint32_t)(29314))
// Не норма ПС
#define KEY_LIM_SIPT_NO_NORM ((uint32_t)(29315))

// Агрегат HATCH_5

// Состояние люка выброса 1
#define KEY_HATCH_5_STATE ((uint32_t)(30300))
// Отказ люка выброса 1
#define KEY_HATCH_5_BREAK ((uint32_t)(30301))
// Открыть люк выброса 1
#define KEY_HATCH_5_O ((uint32_t)(30302))
// Закрыть люк выброса 1
#define KEY_HATCH_5_C ((uint32_t)(30303))
// Люк выброса 1 открыт
#define KEY_O_H_5 ((uint32_t)(30005))
// Люк выброса 1 закрыт
#define KEY_C_H_5 ((uint32_t)(30006))
// Включено реле открывания люка выброса 1
#define KEY_ON_O_H_5 ((uint32_t)(30007))
// Включено реле закрывания люка выброса 1
#define KEY_ON_C_H_5 ((uint32_t)(30008))
// Отказ люка выброса 1
#define KEY_EA344 ((uint32_t)(30009))
// Контроль отказа люка выброса 1
#define KEY_LIM_HATCH_5_BREAK ((uint32_t)(30304))

// Агрегат HATCH_6

// Состояние люка выброса 2
#define KEY_HATCH_6_STATE ((uint32_t)(31300))
// Отказ люка выброса 2
#define KEY_HATCH_6_BREAK ((uint32_t)(31301))
// Открыть люк выброса 2
#define KEY_HATCH_6_O ((uint32_t)(31302))
// Закрыть люк выброса 2
#define KEY_HATCH_6_C ((uint32_t)(31303))
// Люк выброса 2 открыт
#define KEY_O_H_6 ((uint32_t)(31005))
// Люк выброса 2 закрыт
#define KEY_C_H_6 ((uint32_t)(31006))
// Включено реле открывания люка выброса 2
#define KEY_ON_O_H_6 ((uint32_t)(31007))
// Включено реле закрывания люка выброса 2
#define KEY_ON_C_H_6 ((uint32_t)(31008))
// Отказ люка выброса 2
#define KEY_EA345 ((uint32_t)(31009))
// Контроль отказа люка выброса 2
#define KEY_LIM_HATCH_6_BREAK ((uint32_t)(31304))

// Агрегат FC1

// I АД фазы А, А
#define KEY_FC1_AE_I_A ((uint32_t)(32001))
// I АД фазы B, А
#define KEY_FC1_AE_I_B ((uint32_t)(32002))
// I АД фазы C, А
#define KEY_FC1_AE_I_C ((uint32_t)(32003))
// Угол I АД фазы А, °
#define KEY_FC1_AE_PHI_I_A ((uint32_t)(32004))
// Угол I АД фазы B, °
#define KEY_FC1_AE_PHI_I_B ((uint32_t)(32005))
// Угол I АД фазы C, °
#define KEY_FC1_AE_PHI_I_C ((uint32_t)(32006))
// U фазы А, В
#define KEY_FC1_U_A ((uint32_t)(32007))
// U фазы B, В
#define KEY_FC1_U_B ((uint32_t)(32008))
// U фазы C, В
#define KEY_FC1_U_C ((uint32_t)(32009))
// F U фазы А, Гц
#define KEY_FC1_F_U_A ((uint32_t)(32010))
// F U фазы B, Гц
#define KEY_FC1_F_U_B ((uint32_t)(32011))
// F U фазы C, Гц
#define KEY_FC1_F_U_C ((uint32_t)(32012))
// Угол U фазы А, °
#define KEY_FC1_PHI_U_A ((uint32_t)(32013))
// Угол U фазы B, °
#define KEY_FC1_PHI_U_B ((uint32_t)(32014))
// Угол U фазы C, °
#define KEY_FC1_PHI_U_C ((uint32_t)(32015))
// I фазы А, А
#define KEY_FC1_I_A ((uint32_t)(32016))
// I фазы B, А
#define KEY_FC1_I_B ((uint32_t)(32017))
// I фазы C, А
#define KEY_FC1_I_C ((uint32_t)(32018))
// Угол I фазы А, °
#define KEY_FC1_PHI_I_A ((uint32_t)(32019))
// Угол I фазы B, °
#define KEY_FC1_PHI_I_B ((uint32_t)(32020))
// Угол I фазы C, °
#define KEY_FC1_PHI_I_C ((uint32_t)(32021))
// U фазы А2, В
#define KEY_FC1_U_A2 ((uint32_t)(32022))
// F U фазы А2, Гц
#define KEY_FC1_F_U_A2 ((uint32_t)(32023))
// Угол U фазы А2, °
#define KEY_FC1_PHI_U_A2 ((uint32_t)(32024))
// Состояние АД ПЧ
#define KEY_FC1_AE_STATE ((uint32_t)(32025))
// Состояние генератора ПЧ 1
#define KEY_FC1_GEN_STATE ((uint32_t)(32026))
// F U фазы А
#define KEY_FC1_F_U_A_EXT ((uint32_t)(32027))
// Фазировка ПЧ 1
#define KEY_FC1_PH ((uint32_t)(32028))
// Обрыв фазы ПЧ 1
#define KEY_FC1_PH_PHASE ((uint32_t)(32029))
// Активная мощность ПЧ 1, кВт
#define KEY_FC1_P ((uint32_t)(32030))
// Контактор питания АД ПЧ 1
#define KEY_AE_FC1_CONT ((uint32_t)(32031))
// Контактор питания АД ПЧ 1 треугольником
#define KEY_AE_FC1_TRIANGLE_CONT ((uint32_t)(32032))
// Контактор питания АД ПЧ 1 звездой
#define KEY_AE_FC1_STAR_CONT ((uint32_t)(32033))
// Контактор ПЧ 1
#define KEY_FC1_CONT ((uint32_t)(32034))
// Контактор объединения шин ПЧ 1
#define KEY_FC1_BUS_CONT ((uint32_t)(32035))
// Контактор МКИ ПЧ 1
#define KEY_FC1_MKI_ON ((uint32_t)(32036))
// Не норма изоляции ПЧ 1
#define KEY_FC1_MKI_AI ((uint32_t)(32037))
// Включено реле снятия возбуждения ПЧ 1
#define KEY_ON_FC1_FIELD_OFF ((uint32_t)(32038))
// Включено реле самовозбуждения ПЧ 1
#define KEY_ON_FC1_SELF_EXCITATION ((uint32_t)(32039))
// Включено реле корректора ПЧ 1
#define KEY_ON_FC1_CORRECTOR ((uint32_t)(32040))
// Контактор питания АД ПЧ 1
#define KEY_CONT_AE_FC1 ((uint32_t)(32300))
// Контактор питания АД ПЧ 1 треугольником
#define KEY_CONT_AE_FC1_TRIANGLE ((uint32_t)(32301))
// Контактор питания АД ПЧ 1 звездой
#define KEY_CONT_AE_FC1_STAR ((uint32_t)(32302))
// Контактор ПЧ 1
#define KEY_CONT_FC1 ((uint32_t)(32303))
// Контактор объединения шин ПЧ 1
#define KEY_CONT_FC1_BUS ((uint32_t)(32304))
// Контактор МКИ ПЧ 1
#define KEY_CONT_FC1_MKI ((uint32_t)(32305))
// Снять возбуждение ПЧ 1
#define KEY_CONT_FC1_FIELD_OFF ((uint32_t)(32306))
// Самовозбуждение ПЧ 1
#define KEY_CONT_FC1_SELF_EXCITATION ((uint32_t)(32307))
// Корректор ПЧ 1
#define KEY_CONT_FC1_CORRECTOR ((uint32_t)(32308))
// Индикация запуска ПЧ 1
#define KEY_FC1_STARTING ((uint32_t)(32309))
// Индикация что ПЧ 1 запущен или остановлен
#define KEY_FC1_ON_OFF ((uint32_t)(32310))
// Составной параметр аварий ПЧ 1 на БУ400
#define KEY_EVENTS_FC1_400 ((uint32_t)(32100))
// Составной параметр аварий ПЧ 1 БУ50
#define KEY_EVENTS_FC1_50 ((uint32_t)(32101))
// Наработка ПЧ 1
#define KEY_FC1_MOTOHOURS ((uint32_t)(32311))
// Наработка ПЧ2
#define KEY_FC2_MOTOHOURS ((uint32_t)(32312))
// Наработка ПЧ 1, в часах
#define KEY_FC1_HOURS ((uint32_t)(32313))
// Наработка ПЧ 2, в часах
#define KEY_FC2_HOURS ((uint32_t)(32314))
// I АД фазы A сырое
#define KEY_FC1_AE_I_A_RAW ((uint32_t)(32315))
// I АД фазы B сырое
#define KEY_FC1_AE_I_B_RAW ((uint32_t)(32316))
// I АД фазы C сырое
#define KEY_FC1_AE_I_C_RAW ((uint32_t)(32317))
// U фазы A сырое
#define KEY_FC1_U_A_RAW ((uint32_t)(32318))
// U фазы B сырое
#define KEY_FC1_U_B_RAW ((uint32_t)(32319))
// U фазы C сырое
#define KEY_FC1_U_C_RAW ((uint32_t)(32320))
// F U фазы A сырое
#define KEY_FC1_F_U_A_RAW ((uint32_t)(32321))
// F U фазы B сырое
#define KEY_FC1_F_U_B_RAW ((uint32_t)(32322))
// F U фазы C сырое
#define KEY_FC1_F_U_C_RAW ((uint32_t)(32323))
// I фазы A сырое
#define KEY_FC1_I_A_RAW ((uint32_t)(32324))
// I фазы B сырое
#define KEY_FC1_I_B_RAW ((uint32_t)(32325))
// I фазы C сырое
#define KEY_FC1_I_C_RAW ((uint32_t)(32326))
// U фазы A2 сырое
#define KEY_FC1_U_A2_RAW ((uint32_t)(32327))
// F U фазы A2 сырое
#define KEY_FC1_F_U_A2_RAW ((uint32_t)(32328))
// Включено реле К6 генератора ПЧ 1
#define KEY_DISCR_RELAY_K6_FC1 ((uint32_t)(32329))
// Включено реле К7 объединения шин левый и правый борт
#define KEY_DISCR_RELAY_K7_BUS_LR ((uint32_t)(32330))
// Включено реле К18 Ф5-1
#define KEY_DISCR_RELAY_K18_F5_1 ((uint32_t)(32331))
// Включено реле К19 Ф5
#define KEY_DISCR_RELAY_K19_F5 ((uint32_t)(32332))
// Включено реле К10 Ф3-1
#define KEY_DISCR_RELAY_K10_F3_1 ((uint32_t)(32333))
// Включено реле К11 Ф3
#define KEY_DISCR_RELAY_K11_F3 ((uint32_t)(32334))
// Напряжение на выходе ПЧ 1 выше нормы
#define KEY_EA500_1 ((uint32_t)(32102))
// Напряжение на выходе ПЧ 1 ниже нормы
#define KEY_EA501_1 ((uint32_t)(32103))
// Неверная фазировка сети 400 Гц
#define KEY_EA502_1 ((uint32_t)(32104))
// Обрыв фаз сети 400 Гц
#define KEY_EA503_1 ((uint32_t)(32105))
// Частота ПЧ 1 ниже нормы
#define KEY_EA507_1 ((uint32_t)(32106))
// Частота ПЧ 1 выше нормы
#define KEY_EA508_1 ((uint32_t)(32107))
// КЗ ПЧ 1
#define KEY_EA519_1 ((uint32_t)(32108))
// Напряжение на выходе ПЧ 1 выше верхнего предела
#define KEY_EA520_1 ((uint32_t)(32129))
// Напряжение на выходе ПЧ 1 ниже нижнего предела
#define KEY_EA521_1 ((uint32_t)(32130))
// Перегруз ПЧ 1 по мощности
#define KEY_EP525_1 ((uint32_t)(32110))
// Неисправность контактора питания АД ПЧ 1
#define KEY_EA550_1 ((uint32_t)(32111))
// Неисправность контактора питания АД ПЧ 1 звездой
#define KEY_EA551_1 ((uint32_t)(32112))
// Неисправность контактора питания АД ПЧ 1 треугольником
#define KEY_EA552_1 ((uint32_t)(32113))
// Неисправность контактора ПЧ 1
#define KEY_EA554 ((uint32_t)(32115))
// Неисправность контактора объединения шин ПЧ 1
#define KEY_EA555 ((uint32_t)(32116))
// Неисправность контактора МКИ ПЧ 1
#define KEY_EA556 ((uint32_t)(32117))
// Неисправность реле снятия возбуждения ПЧ 1
#define KEY_EA557 ((uint32_t)(32118))
// Неисправность реле корректора
#define KEY_EA558 ((uint32_t)(32119))
// Неисправность реле объединения цепей возбуждения разных ПЧ
#define KEY_EA559 ((uint32_t)(32120))
// Срабатывание МКИ ПЧ 1
#define KEY_EA560 ((uint32_t)(32121))
// Неудачный пуск АД ПЧ 1. Невыход на пусковой ток
#define KEY_EA562_1 ((uint32_t)(32123))
// Неудачный пуск АД ПЧ 1. Пропало напряжение источника
#define KEY_EA563_1 ((uint32_t)(32124))
// Неудачный пуск АД ПЧ 1. Невыход на ток холостого хода
#define KEY_EA564_1 ((uint32_t)(32125))
// Превышение I АД ПЧ 1 150%
#define KEY_EP565_1 ((uint32_t)(32126))
// Превышение I АД ПЧ 1 250%
#define KEY_EA566_1 ((uint32_t)(32127))
// Отключение фидеров 400 Гц через 0,6 с
#define KEY_EA567_1 ((uint32_t)(32128))
// Неисправность реле К6 генератора ПЧ 1
#define KEY_EA526_1 ((uint32_t)(32131))
// Неисправность реле К7 объединения шин
#define KEY_EA527_1 ((uint32_t)(32132))
// Неисправность реле К18 Ф5-1
#define KEY_EA528_1 ((uint32_t)(32133))
// Неисправность реле К19 Ф5
#define KEY_EA529_1 ((uint32_t)(32134))
// Неисправность реле К10 Ф3-1
#define KEY_EA530_1 ((uint32_t)(32135))
// Неисправность реле К11 Ф3
#define KEY_EA531_1 ((uint32_t)(32136))
// Контроль включения контактора питания АД ПЧ
#define KEY_LIM_WAIT_KAE_ON ((uint32_t)(32335))
// Контроль отключения контактора питания АД ПЧ
#define KEY_LIM_WAIT_KAE_OFF ((uint32_t)(32336))
// Контроль включения контактора питания АД ПЧ звездой
#define KEY_LIM_WAIT_KAE_STAR_ON ((uint32_t)(32337))
// Контроль отключения контактора питания АД ПЧ звездой
#define KEY_LIM_WAIT_KAE_STAR_OFF ((uint32_t)(32338))
// Контроль включения контактора питания АД ПЧ треугольником
#define KEY_LIM_WAIT_KAE_TRIANGLE_ON ((uint32_t)(32339))
// Контроль отключения контактора питания АД ПЧ треугольником
#define KEY_LIM_WAIT_KAE_TRIANGLE_OFF ((uint32_t)(32340))
// Превышение номинального тока АД ПЧ1 в 1,5 раза по фазе А
#define KEY_LIM_FC1_A_OVERLOAD ((uint32_t)(32341))
// Превышение номинального тока АД ПЧ1 в 1,5 раза по фазе B
#define KEY_LIM_FC1_B_OVERLOAD ((uint32_t)(32342))
// Превышение номинального тока АД ПЧ1 в 1,5 раза по фазе C
#define KEY_LIM_FC1_C_OVERLOAD ((uint32_t)(32343))
// Превышение номинального тока АД ПЧ1 в 2,5 раза по фазе А
#define KEY_LIM_FC1_A_SHORT ((uint32_t)(32344))
// Превышение номинального тока АД ПЧ1 в 2,5 раза по фазе B
#define KEY_LIM_FC1_B_SHORT ((uint32_t)(32345))
// Превышение номинального тока АД ПЧ1 в 2,5 раза по фазе C
#define KEY_LIM_FC1_C_SHORT ((uint32_t)(32346))
// Контроль включения контактора ПЧ
#define KEY_LIM_WAIT_KFC1_ON ((uint32_t)(32347))
// Контроль отключения контактора ПЧ
#define KEY_LIM_WAIT_KFC1_OFF ((uint32_t)(32348))
// Контроль включения контактора объединения шин ПЧ
#define KEY_LIM_WAIT_KFC1_BUS_ON ((uint32_t)(32349))
// Контроль отключения контактора объединения шин ПЧ
#define KEY_LIM_WAIT_KFC1_BUS_OFF ((uint32_t)(32350))
// Контроль включения контактора МКИ ПЧ
#define KEY_LIM_WAIT_KFC1_MKI_ON ((uint32_t)(32351))
// Контроль отключения контактора МКИ ПЧ
#define KEY_LIM_WAIT_KFC1_MKI_OFF ((uint32_t)(32352))
// Сработало МКИ ПЧ
#define KEY_LIM_FC1_MKI ((uint32_t)(32353))
// Контроль включения реле снятия возбуждения ПЧ
#define KEY_LIM_WAIT_ON_FC1_FIELD_OFF ((uint32_t)(32354))
// Контроль отключения реле снятия возбуждения ПЧ
#define KEY_LIM_WAIT_OFF_FC1_FIELD_OFF ((uint32_t)(32355))
// Контроль включения реле самовозбуждения ПЧ
#define KEY_LIM_WAIT_ON_FC1_SELF_EXCITATION ((uint32_t)(32356))
// Контроль отключения реле самовозбуждения ПЧ
#define KEY_LIM_WAIT_OFF_FC1_SELF_EXCITATION ((uint32_t)(32357))
// Контроль включения реле корректора ПЧ
#define KEY_LIM_WAIT_ON_FC1_CORRECTOR ((uint32_t)(32358))
// Контроль отключения реле корректора ПЧ
#define KEY_LIM_WAIT_OFF_FC1_CORRECTOR ((uint32_t)(32359))
// U фазы A выше нормы
#define KEY_LIM_FC1_U_A_HIGH ((uint32_t)(32360))
// U фазы B выше нормы
#define KEY_LIM_FC1_U_B_HIGH ((uint32_t)(32361))
// U фазы C выше нормы
#define KEY_LIM_FC1_U_C_HIGH ((uint32_t)(32362))
// U фазы A ниже нормы
#define KEY_LIM_FC1_U_A_LOW ((uint32_t)(32363))
// U фазы B ниже нормы
#define KEY_LIM_FC1_U_B_LOW ((uint32_t)(32364))
// U фазы C ниже нормы
#define KEY_LIM_FC1_U_C_LOW ((uint32_t)(32365))
// U фазы A выше верхнего предела
#define KEY_LIM_FC1_U_A_TOO_HIGH ((uint32_t)(32366))
// U фазы B выше верхнего предела
#define KEY_LIM_FC1_U_B_TOO_HIGH ((uint32_t)(32367))
// U фазы C выше верхнего предела
#define KEY_LIM_FC1_U_C_TOO_HIGH ((uint32_t)(32368))
// U фазы A ниже нижнего предела
#define KEY_LIM_FC1_U_A_TOO_LOW ((uint32_t)(32369))
// U фазы B ниже нижнего предела
#define KEY_LIM_FC1_U_B_TOO_LOW ((uint32_t)(32370))
// U фазы C ниже нижнего предела
#define KEY_LIM_FC1_U_C_TOO_LOW ((uint32_t)(32371))
// F U фазы A выше нормы
#define KEY_LIM_FC1_F_U_A_HIGH ((uint32_t)(32372))
// F U фазы B выше нормы
#define KEY_LIM_FC1_F_U_B_HIGH ((uint32_t)(32373))
// F U фазы C выше нормы
#define KEY_LIM_FC1_F_U_C_HIGH ((uint32_t)(32374))
// F U фазы A ниже нормы
#define KEY_LIM_FC1_F_U_A_LOW ((uint32_t)(32375))
// F U фазы B ниже нормы
#define KEY_LIM_FC1_F_U_B_LOW ((uint32_t)(32376))
// F U фазы C ниже нормы
#define KEY_LIM_FC1_F_U_C_LOW ((uint32_t)(32377))
// Обрыв одной из фаз ПЧ1
#define KEY_LIM_BREAK_WIRE_400_1 ((uint32_t)(32378))
// Перегруз по току 50 % ПЧ1
#define KEY_LIM_FC1_GEN_I_A_OVERLOAD ((uint32_t)(32379))
// Перегруз по току 50 % ПЧ1
#define KEY_LIM_FC1_GEN_I_B_OVERLOAD ((uint32_t)(32380))
// Перегруз по току 50 % ПЧ1
#define KEY_LIM_FC1_GEN_I_C_OVERLOAD ((uint32_t)(32381))
// КЗ ПЧ1
#define KEY_LIM_FC1_GEN_I_A_SHORT ((uint32_t)(32382))
// КЗ ПЧ1
#define KEY_LIM_FC1_GEN_I_B_SHORT ((uint32_t)(32383))
// КЗ ПЧ1
#define KEY_LIM_FC1_GEN_I_C_SHORT ((uint32_t)(32384))
// Запускается ПЧ100 1
#define KEY_LIM_FC1_STARTING ((uint32_t)(32385))
// Запускается ПЧ100 1
#define KEY_LIM_FC1_ON_OFF ((uint32_t)(32386))
// Контроль реле К6 генератора ПЧ 1 при включении
#define KEY_LIM_FC1_RELAY_K6_ON ((uint32_t)(32387))
// Контроль реле К6 генератора ПЧ 1 при отключении
#define KEY_LIM_FC1_RELAY_K6_OFF ((uint32_t)(32388))
// Контроль реле К7 объединения шин левый и правый борт при включении
#define KEY_LIM_FC1_RELAY_K7_BUS_LR_ON ((uint32_t)(32389))
// Контроль реле К7 объединения шин левый и правый борт при отключении
#define KEY_LIM_FC1_RELAY_K7_BUS_LR_OFF ((uint32_t)(32390))
// Контроль реле К18 Ф5-1 при включении
#define KEY_LIM_FC1_RELAY_K18_F5_1_ON ((uint32_t)(32391))
// Контроль реле К18 Ф5-1 при отключении
#define KEY_LIM_FC1_RELAY_K18_F5_1_OFF ((uint32_t)(32392))
// Контроль реле К19 Ф5 при включении
#define KEY_LIM_FC1_RELAY_K19_F5_ON ((uint32_t)(32393))
// Контроль реле К19 Ф5 при включении
#define KEY_LIM_FC1_RELAY_K19_F5_OFF ((uint32_t)(32394))
// Контроль реле К10 Ф3-1 при включении
#define KEY_LIM_FC1_RELAY_K10_F3_1_ON ((uint32_t)(32395))
// Контроль реле К10 Ф3-1 при отключении
#define KEY_LIM_FC1_RELAY_K10_F3_1_OFF ((uint32_t)(32396))
// Контроль реле К11 Ф3 при включении
#define KEY_LIM_FC1_RELAY_K11_F3_ON ((uint32_t)(32397))
// Контроль реле К11 Ф3 при отключении
#define KEY_LIM_FC1_RELAY_K11_F3_OFF ((uint32_t)(32398))

// Агрегат FC2

// I АД фазы А, А
#define KEY_FC2_AE_I_A ((uint32_t)(33001))
// I АД фазы B, А
#define KEY_FC2_AE_I_B ((uint32_t)(33002))
// I АД фазы C, А
#define KEY_FC2_AE_I_C ((uint32_t)(33003))
// Угол I АД фазы А, °
#define KEY_FC2_AE_PHI_I_A ((uint32_t)(33004))
// Угол I АД фазы B, °
#define KEY_FC2_AE_PHI_I_B ((uint32_t)(33005))
// Угол I АД фазы C, °
#define KEY_FC2_AE_PHI_I_C ((uint32_t)(33006))
// U фазы А, В
#define KEY_FC2_U_A ((uint32_t)(33007))
// U фазы B, В
#define KEY_FC2_U_B ((uint32_t)(33008))
// U фазы C, В
#define KEY_FC2_U_C ((uint32_t)(33009))
// F U фазы А, Гц
#define KEY_FC2_F_U_A ((uint32_t)(33010))
// F U фазы B, Гц
#define KEY_FC2_F_U_B ((uint32_t)(33011))
// F U фазы C, Гц
#define KEY_FC2_F_U_C ((uint32_t)(33012))
// Угол U фазы А, °
#define KEY_FC2_PHI_U_A ((uint32_t)(33013))
// Угол U фазы B, °
#define KEY_FC2_PHI_U_B ((uint32_t)(33014))
// Угол U фазы C, °
#define KEY_FC2_PHI_U_C ((uint32_t)(33015))
// I фазы А, А
#define KEY_FC2_I_A ((uint32_t)(33016))
// I фазы B, А
#define KEY_FC2_I_B ((uint32_t)(33017))
// I фазы C, А
#define KEY_FC2_I_C ((uint32_t)(33018))
// Угол I фазы А, °
#define KEY_FC2_PHI_I_A ((uint32_t)(33019))
// Угол I фазы B, °
#define KEY_FC2_PHI_I_B ((uint32_t)(33020))
// Угол I фазы C, °
#define KEY_FC2_PHI_I_C ((uint32_t)(33021))
// U фазы А2, В
#define KEY_FC2_U_A2 ((uint32_t)(33022))
// F U фазы А2, Гц
#define KEY_FC2_F_U_A2 ((uint32_t)(33023))
// Угол U фазы А2, °
#define KEY_FC2_PHI_U_A2 ((uint32_t)(33024))
// Состояние АД ПЧ
#define KEY_FC2_AE_STATE ((uint32_t)(33025))
// Состояние генератора ПЧ
#define KEY_FC2_GEN_STATE ((uint32_t)(33026))
// F U фазы А
#define KEY_FC2_F_U_A_EXT ((uint32_t)(33027))
// Фазировка ПЧ
#define KEY_FC2_PH ((uint32_t)(33028))
// Обрыв фазы ПЧ
#define KEY_FC2_PH_PHASE ((uint32_t)(33029))
// Активная мощность ПЧ2, кВт
#define KEY_FC2_P ((uint32_t)(33030))
// Составной параметр аварий ПЧ2 на БУ400
#define KEY_EVENTS_FC2_400 ((uint32_t)(33100))
// Контактор питания АД ПЧ2
#define KEY_AE_FC2_CONT ((uint32_t)(33031))
// Контактор питания АД ПЧ2 треугольником
#define KEY_AE_FC2_TRIANGLE_CONT ((uint32_t)(33032))
// Контактор питания АД ПЧ2 звездой
#define KEY_AE_FC2_STAR_CONT ((uint32_t)(33033))
// Контактор ПЧ2
#define KEY_FC2_CONT ((uint32_t)(33034))
// Контактор объединения шин ПЧ2
#define KEY_FC2_BUS_CONT ((uint32_t)(33035))
// Контактор МКИ ПЧ2
#define KEY_FC2_MKI_ON ((uint32_t)(33036))
// Не норма изоляции ПЧ2
#define KEY_FC2_MKI_AI ((uint32_t)(33037))
// Включено реле снятия возбуждения ПЧ2
#define KEY_ON_FC2_FIELD_OFF ((uint32_t)(33038))
// Включено реле самовозбуждения ПЧ2
#define KEY_ON_FC2_SELF_EXCITATION ((uint32_t)(33039))
// Включено реле корректора ПЧ2
#define KEY_ON_FC2_CORRECTOR ((uint32_t)(33040))
// Авария корректора возбуждения ПЧ2
#define KEY_ALARM_CORRECTOR_FC2 ((uint32_t)(33041))
// Контактор питания АД ПЧ2
#define KEY_CONT_AE_FC2 ((uint32_t)(33300))
// Контактор питания АД ПЧ2 треугольником
#define KEY_CONT_AE_FC2_TRIANGLE ((uint32_t)(33301))
// Контактор питания АД ПЧ2 звездой
#define KEY_CONT_AE_FC2_STAR ((uint32_t)(33302))
// Контактор ПЧ2
#define KEY_CONT_FC2 ((uint32_t)(33303))
// Контактор объединения шин ПЧ2
#define KEY_CONT_FC2_BUS ((uint32_t)(33304))
// Контактор МКИ ПЧ2
#define KEY_CONT_FC2_MKI ((uint32_t)(33305))
// Снять возбуждение ПЧ2
#define KEY_CONT_FC2_FIELD_OFF ((uint32_t)(33306))
// Самовозбуждение ПЧ2
#define KEY_CONT_FC2_SELF_EXCITATION ((uint32_t)(33307))
// Корректор ПЧ2
#define KEY_CONT_FC2_CORRECTOR ((uint32_t)(33308))
// Индикация запуска ПЧ100 2
#define KEY_FC2_STARTING ((uint32_t)(33309))
// Индикация что ПЧ100 1 запущен или остановлен
#define KEY_FC2_ON_OFF ((uint32_t)(33310))
// I АД фазы A сырое
#define KEY_FC2_AE_I_A_RAW ((uint32_t)(33311))
// I АД фазы B сырое
#define KEY_FC2_AE_I_B_RAW ((uint32_t)(33312))
// I АД фазы C сырое
#define KEY_FC2_AE_I_C_RAW ((uint32_t)(33313))
// U фазы A сырое
#define KEY_FC2_U_A_RAW ((uint32_t)(33314))
// U фазы B сырое
#define KEY_FC2_U_B_RAW ((uint32_t)(33315))
// U фазы C сырое
#define KEY_FC2_U_C_RAW ((uint32_t)(33316))
// F U фазы A сырое
#define KEY_FC2_F_U_A_RAW ((uint32_t)(33317))
// F U фазы B сырое
#define KEY_FC2_F_U_B_RAW ((uint32_t)(33318))
// F U фазы C сырое
#define KEY_FC2_F_U_C_RAW ((uint32_t)(33319))
// I фазы A сырое
#define KEY_FC2_I_A_RAW ((uint32_t)(33320))
// I фазы B сырое
#define KEY_FC2_I_B_RAW ((uint32_t)(33321))
// I фазы C сырое
#define KEY_FC2_I_C_RAW ((uint32_t)(33322))
// U фазы A2 сырое
#define KEY_FC2_U_A2_RAW ((uint32_t)(33323))
// F U фазы A2 сырое
#define KEY_FC2_F_U_A2_RAW ((uint32_t)(33324))
// Включено реле К6 генератора ПЧ 2
#define KEY_DISCR_RELAY_K6_FC2 ((uint32_t)(33325))
// Включено реле К7 объединения шин 230 В
#define KEY_DISCR_RELAY_K7_BUS_230 ((uint32_t)(33326))
// Включено реле К18 Ф6-1
#define KEY_DISCR_RELAY_K18_F6_1 ((uint32_t)(33327))
// Включено реле К19 Ф6
#define KEY_DISCR_RELAY_K19_F6 ((uint32_t)(33328))
// Напряжение ПЧ2 выше нормы
#define KEY_EA500_2 ((uint32_t)(33329))
// Напряжение ПЧ2 ниже нормы
#define KEY_EA501_2 ((uint32_t)(33330))
// Неверная фазировка сети 400 Гц
#define KEY_EA502_2 ((uint32_t)(33331))
// Обрыв фаз сети 400 Гц
#define KEY_EA503_2 ((uint32_t)(33332))
// Частота ПЧ2 ниже нормы
#define KEY_EA507_2 ((uint32_t)(33333))
// Частота ПЧ2 выше нормы
#define KEY_EA508_2 ((uint32_t)(33334))
// КЗ ПЧ2
#define KEY_EA519_2 ((uint32_t)(33335))
// Напряжение ПЧ2 выше верхнего предела
#define KEY_EA520_2 ((uint32_t)(33336))
// Напряжение ПЧ2 ниже нижнего предела
#define KEY_EA521_2 ((uint32_t)(33337))
// Неисправность контактора питания АД ПЧ2
#define KEY_EA550_2 ((uint32_t)(33338))
// Перегруз ПЧ2 по мощности
#define KEY_EP525_2 ((uint32_t)(33339))
// Неисправность контактора питания АД ПЧ2 звездой
#define KEY_EA551_2 ((uint32_t)(33340))
// Неисправность контактора питания АД ПЧ2 треугольником
#define KEY_EA552_2 ((uint32_t)(33341))
// Неисправность контактора ПЧ2
#define KEY_EA554_2 ((uint32_t)(33342))
// Неисправность контактора объединения шин ПЧ2
#define KEY_EA555_2 ((uint32_t)(33343))
// Неисправность контактора МКИ ПЧ2
#define KEY_EA556_2 ((uint32_t)(33344))
// Неисправность реле снятия возбуждения ПЧ2
#define KEY_EA557_2 ((uint32_t)(33345))
// Неисправность реле статизма для параллельной работы ПЧ
#define KEY_EA558_2 ((uint32_t)(33346))
// Неисправность реле начального возбуждения ПЧ2
#define KEY_EA559_2 ((uint32_t)(33347))
// Срабатывание МКИ ПЧ 2
#define KEY_EA560_2 ((uint32_t)(33120))
// Неудачный пуск АД ПЧ 2. Невыход на пусковой ток
#define KEY_EA562_2 ((uint32_t)(33348))
// Неудачный пуск АД ПЧ 2. Пропало напряжение источника
#define KEY_EA563_2 ((uint32_t)(33349))
// Неудачный пуск АД ПЧ 2. Невыход на ток холостого хода
#define KEY_EA564_2 ((uint32_t)(33350))
// Превышение I АД ПЧ 2 150%
#define KEY_EP565_2 ((uint32_t)(33351))
// Превышение I АД ПЧ 2 250%
#define KEY_EA566_2 ((uint32_t)(33352))
// Неисправность реле К6 генератора ПЧ 2
#define KEY_EA526_2 ((uint32_t)(33042))
// Неисправность реле К7 объединения шин 230 В
#define KEY_EA527_2 ((uint32_t)(33043))
// Неисправность реле К18 Ф6-1
#define KEY_EA528_2 ((uint32_t)(33044))
// Неисправность реле К19 Ф6
#define KEY_EA529_2 ((uint32_t)(33045))
// Контроль включения контактора питания АД ПЧ2
#define KEY_LIM_WAIT_KAE2_ON ((uint32_t)(33353))
// Контроль отключения контактора питания АД ПЧ2
#define KEY_LIM_WAIT_KAE2_OFF ((uint32_t)(33354))
// Контроль включения контактора питания АД ПЧ2 звездой
#define KEY_LIM_WAIT_KAE2_STAR_ON ((uint32_t)(33355))
// Контроль отключения контактора питания АД ПЧ2 звездой
#define KEY_LIM_WAIT_KAE2_STAR_OFF ((uint32_t)(33356))
// Контроль включения контактора питания АД ПЧ2 треугольником
#define KEY_LIM_WAIT_KAE2_TRIANGLE_ON ((uint32_t)(33357))
// Контроль отключения контактора питания АД ПЧ2 треугольником
#define KEY_LIM_WAIT_KAE2_TRIANGLE_OFF ((uint32_t)(33358))
// Превышение номинального тока АД ПЧ2 в 1,5 раза по фазе А
#define KEY_LIM_FC2_A_OVERLOAD ((uint32_t)(33359))
// Превышение номинального тока АД ПЧ2 в 1,5 раза по фазе B
#define KEY_LIM_FC2_B_OVERLOAD ((uint32_t)(33360))
// Превышение номинального тока АД ПЧ2 в 1,5 раза по фазе C
#define KEY_LIM_FC2_C_OVERLOAD ((uint32_t)(33361))
// Превышение номинального тока АД ПЧ2 в 2,5 раза по фазе А
#define KEY_LIM_FC2_A_SHORT ((uint32_t)(33362))
// Превышение номинального тока АД ПЧ2 в 2,5 раза по фазе B
#define KEY_LIM_FC2_B_SHORT ((uint32_t)(33363))
// Превышение номинального тока АД ПЧ2 в 2,5 раза по фазе C
#define KEY_LIM_FC2_C_SHORT ((uint32_t)(33364))
// Контроль включения контактора ПЧ2
#define KEY_LIM_WAIT_KFC2_ON ((uint32_t)(33365))
// Контроль отключения контактора ПЧ2
#define KEY_LIM_WAIT_KFC2_OFF ((uint32_t)(33366))
// Контроль включения контактора объединения шин ПЧ2
#define KEY_LIM_WAIT_KFC2_BUS_ON ((uint32_t)(33367))
// Контроль отключения контактора объединения шин ПЧ2
#define KEY_LIM_WAIT_KFC2_BUS_OFF ((uint32_t)(33368))
// Контроль включения контактора МКИ ПЧ2
#define KEY_LIM_WAIT_KFC2_MKI_ON ((uint32_t)(33369))
// Контроль отключения контактора МКИ ПЧ2
#define KEY_LIM_WAIT_KFC2_MKI_OFF ((uint32_t)(33370))
// Сработало МКИ ПЧ2
#define KEY_LIM_FC2_MKI ((uint32_t)(33371))
// Контроль включения реле снятия возбуждения ПЧ2
#define KEY_LIM_WAIT_ON_FC2_FIELD_OFF ((uint32_t)(33372))
// Контроль отключения реле снятия возбуждения ПЧ2
#define KEY_LIM_WAIT_OFF_FC2_FIELD_OFF ((uint32_t)(33373))
// Контроль включения реле самовозбуждения ПЧ2
#define KEY_LIM_WAIT_ON_FC2_SELF_EXCITATION ((uint32_t)(33374))
// Контроль отключения реле самовозбуждения ПЧ2
#define KEY_LIM_WAIT_OFF_FC2_SELF_EXCITATION ((uint32_t)(33375))
// Контроль включения реле корректора ПЧ2
#define KEY_LIM_WAIT_ON_FC2_CORRECTOR ((uint32_t)(33376))
// Контроль отключения реле корректора ПЧ2
#define KEY_LIM_WAIT_OFF_FC2_CORRECTOR ((uint32_t)(33377))
// U фазы A выше нормы
#define KEY_LIM_FC2_U_A_HIGH ((uint32_t)(33378))
// U фазы B выше нормы
#define KEY_LIM_FC2_U_B_HIGH ((uint32_t)(33379))
// U фазы C выше нормы
#define KEY_LIM_FC2_U_C_HIGH ((uint32_t)(33380))
// U фазы A ниже нормы
#define KEY_LIM_FC2_U_A_LOW ((uint32_t)(33381))
// U фазы B ниже нормы
#define KEY_LIM_FC2_U_B_LOW ((uint32_t)(33382))
// U фазы C ниже нормы
#define KEY_LIM_FC2_U_C_LOW ((uint32_t)(33383))
// U фазы A выше верхнего предела
#define KEY_LIM_FC2_U_A_TOO_HIGH ((uint32_t)(33384))
// U фазы B выше верхнего предела
#define KEY_LIM_FC2_U_B_TOO_HIGH ((uint32_t)(33385))
// U фазы C выше верхнего предела
#define KEY_LIM_FC2_U_C_TOO_HIGH ((uint32_t)(33386))
// U фазы A ниже нижнего предела
#define KEY_LIM_FC2_U_A_TOO_LOW ((uint32_t)(33387))
// U фазы B ниже нижнего предела
#define KEY_LIM_FC2_U_B_TOO_LOW ((uint32_t)(33388))
// U фазы C ниже нижнего предела
#define KEY_LIM_FC2_U_C_TOO_LOW ((uint32_t)(33389))
// F U фазы A выше нормы
#define KEY_LIM_FC2_F_U_A_HIGH ((uint32_t)(33390))
// F U фазы B выше нормы
#define KEY_LIM_FC2_F_U_B_HIGH ((uint32_t)(33391))
// F U фазы C выше нормы
#define KEY_LIM_FC2_F_U_C_HIGH ((uint32_t)(33392))
// F U фазы A ниже нормы
#define KEY_LIM_FC2_F_U_A_LOW ((uint32_t)(33393))
// F U фазы B ниже нормы
#define KEY_LIM_FC2_F_U_B_LOW ((uint32_t)(33394))
// F U фазы C ниже нормы
#define KEY_LIM_FC2_F_U_C_LOW ((uint32_t)(33395))
// Обрыв одной из фаз ПЧ
#define KEY_LIM_BREAK_WIRE_400_2 ((uint32_t)(33396))
// Перегруз по току 50 % ПЧ2
#define KEY_LIM_FC2_GEN_I_A_OVERLOAD ((uint32_t)(33397))
// Перегруз по току 50 % ПЧ2
#define KEY_LIM_FC2_GEN_I_B_OVERLOAD ((uint32_t)(33398))
// Перегруз по току 50 % ПЧ2
#define KEY_LIM_FC2_GEN_I_C_OVERLOAD ((uint32_t)(33399))
// КЗ ПЧ2
#define KEY_LIM_FC2_GEN_I_A_SHORT ((uint32_t)(33400))
// КЗ ПЧ2
#define KEY_LIM_FC2_GEN_I_B_SHORT ((uint32_t)(33401))
// КЗ ПЧ2
#define KEY_LIM_FC2_GEN_I_C_SHORT ((uint32_t)(33402))
// Запускается ПЧ100 2
#define KEY_LIM_FC2_STARTING ((uint32_t)(33403))
// Индикация останова, аварии  ПЧ100 2
#define KEY_LIM_FC2_ON_OFF ((uint32_t)(33404))
// Контроль реле К6 генератора ПЧ 2 при включении
#define KEY_LIM_FC2_RELAY_K6_ON ((uint32_t)(33405))
// Контроль реле К6 генератора ПЧ 2 при отключении
#define KEY_LIM_FC2_RELAY_K6_OFF ((uint32_t)(33406))
// Контроль реле К7 объединения шин 230 В при включении
#define KEY_LIM_FC2_RELAY_K7_BUS_230_ON ((uint32_t)(33407))
// Контроль реле К7 объединения шин 230 В при отключении
#define KEY_LIM_FC2_RELAY_K7_BUS_230_OFF ((uint32_t)(33408))
// Контроль реле К18 Ф6-1 при включении
#define KEY_LIM_FC2_RELAY_K18_F6_1_ON ((uint32_t)(33409))
// Контроль реле К18 Ф6-1 при отключении
#define KEY_LIM_FC2_RELAY_K18_F6_1_OFF ((uint32_t)(33410))
// Контроль реле К19 Ф6 при включении
#define KEY_LIM_FC2_RELAY_K19_F6_ON ((uint32_t)(33411))
// Контроль реле К19 Ф6 при отключении
#define KEY_LIM_FC2_RELAY_K19_F6_OFF ((uint32_t)(33412))

// Устройство UKPT2

// I ИВЭП, А
#define KEY_I_IVEP ((uint32_t)(1001000))
// U ИВЭП, В
#define KEY_U_IVEP ((uint32_t)(1001001))
// Состояние ИВЭП
#define KEY_STATUS_IVEP ((uint32_t)(1001002))

// Устройство UKPT3

// I СИПТ, А
#define KEY_I_SIPT ((uint32_t)(1002000))
// U СИПТ, В
#define KEY_U_SIPT ((uint32_t)(1002001))

// Устройство RPMC

// Обороты ЭА, об/мин
#define KEY_EA_RPM ((uint32_t)(2000000))

// Устройство VENT

// Состояние вентилятора
#define KEY_VENT_STATE ((uint32_t)(3000000))
// Неисправность контактора вентилятора
#define KEY_EA600 ((uint32_t)(3000001))
// КЗ(отключен) автомат защиты вентилятора
#define KEY_EA601 ((uint32_t)(3000002))
// Отключен автомат защиты вентилятора
#define KEY_EP602 ((uint32_t)(3000003))
// Контроль КЗ(отключен) автомат защиты вентилятора
#define KEY_LIM_VENT_AUT ((uint32_t)(3000004))
// Контроль состояния автомата защиты вентилятора
#define KEY_LIM_VENT_AUT_OP ((uint32_t)(3000005))
// Контроль включения контактора вентилятора
#define KEY_LIM_WAIT_KVENT_ON ((uint32_t)(3000006))
// Контроль отключения контактора вентилятора
#define KEY_LIM_WAIT_KVENT_OFF ((uint32_t)(3000007))

// Устройство BURN

// Неудачный запуск прожига
#define KEY_EA700 ((uint32_t)(4000000))
// Неудачное прохождение прожига
#define KEY_EA701 ((uint32_t)(4000001))

#endif

